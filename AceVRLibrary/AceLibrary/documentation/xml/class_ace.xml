<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_ace" kind="class" language="C++" prot="public">
    <compoundname>Ace</compoundname>
    <includes refid="_ace_8h" local="no">Ace.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_ace_1ae1d25ce89a5152ac3dd591aa75c57764" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::AbsoluteValue</definition>
        <argsstring>(double num)</argsstring>
        <name>AbsoluteValue</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the absolute value of a number in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para>The absolute value is the positive version of value (example: |3-4| = 1).</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>double<sp/>retVal<sp/>=<sp/>Ace::AbsoluteValue(-2.3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.300000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to use to determine the absolute value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="41" column="1" bodyfile="Ace.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae573ce4a06f6050b29e5c8ad3285b05c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::AbsoluteValue</definition>
        <argsstring>(float num)</argsstring>
        <name>AbsoluteValue</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the absolute value of a number in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para>The absolute value is the positive version of value (example: |3-4| = 1).</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>float<sp/>retVal<sp/>=<sp/>Ace::AbsoluteValue(-2.3f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.300000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to use to determine the absolute value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="42" column="1" bodyfile="Ace.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae84033e0edc7822aa6a1cd3d6147dac8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::AllocateAndCopyString</definition>
        <argsstring>(char *strToCopy)</argsstring>
        <name>AllocateAndCopyString</name>
        <param>
          <type>char *</type>
          <declname>strToCopy</declname>
        </param>
        <briefdescription>
<para>Allocates a buffer and copies a provided traditional string into the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>7/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>strToCopy<sp/>=<sp/>&quot;An<sp/>eraser<sp/>of<sp/>love...&quot;;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>buffer<sp/>=<sp/>Ace::AllocateAndCopyString(strToCopy);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
</programlisting> Output:An eraser of love...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToCopy</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, to copy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated buffer containing strToCopy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="43" column="1" bodyfile="Ace.cpp" bodystart="74" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7df3d37c864aaded3894cff9fcb72b71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::AllocateAndCopyString</definition>
        <argsstring>(wchar_t *wideStrToCopy)</argsstring>
        <name>AllocateAndCopyString</name>
        <param>
          <type>wchar_t *</type>
          <declname>wideStrToCopy</declname>
        </param>
        <briefdescription>
<para>Allocates a buffer and copies a provided traditional wide string into the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>7/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>strToCopy<sp/>=<sp/>L&quot;An<sp/>eraser<sp/>of<sp/>love...&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>buffer<sp/>=<sp/>Ace::AllocateAndCopyString(strToCopy);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
</programlisting> Output:An eraser of love...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">wideStrToCopy</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, the wide string to copy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated buffer containing wideStrToCopy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="44" column="1" bodyfile="Ace.cpp" bodystart="123" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aec125b75d04c5ae6b9ba3f77d9ae5303" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcCos</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcCos</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcCos in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/3/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcCos(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.667457</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcCos for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcCos of numInRadians. If a mathematical error occurs or numInRadians is not between -1 and 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="45" column="1" bodyfile="Ace.cpp" bodystart="173" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa2cd7566162e0d739d730444a99b395a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcCos</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcCos</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcCos in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcCos(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.667457</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcCos for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcCos of numInRadians. If a mathematical error occurs or numInRadians is not between -1 and 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="46" column="1" bodyfile="Ace.cpp" bodystart="225" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a315b29bc2074a8f2354e9607fdca545c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcCosh</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcCosh</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcCosh in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/3/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcCosh(1.5);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:0.962424</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcCosh for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcCosh of numInRadians. If a mathematical error occurs or numInRadians is less than 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="47" column="1" bodyfile="Ace.cpp" bodystart="276" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a967e4ba19d22783893f86204712cce81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcCosh</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcCosh</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcCosh in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcCosh(1.5f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:0.962424</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcCosh for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcCosh of numInRadians. If a mathematical error occurs or numInRadians is less than 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="48" column="1" bodyfile="Ace.cpp" bodystart="327" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a6dda55fe05e7f2874f44e9347d64068a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcSin</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcSin</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcSin in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcSin(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.903339</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcSin for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcSin of numInRadians. If a mathematical error occurs or numInRadians is less than or equal to -1 or numInRadians is greater then 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="49" column="1" bodyfile="Ace.cpp" bodystart="380" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab254fa951c7846affad26371c3ff2a12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcSin</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcSin</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcSin in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcSin(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.903339</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcSin for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcSin of numInRadians. If a mathematical error occurs or numInRadians is less than or equal to -1 or numInRadians is greater then 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="50" column="1" bodyfile="Ace.cpp" bodystart="433" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa4e43dbae9fc597031f96b6826077792" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcSinH</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcSinH</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcSinH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcSinH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:0.721225</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcSinH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcSinH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="51" column="1" bodyfile="Ace.cpp" bodystart="485" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aff6eb5ec6b5bf00bc9dab3187c0e1a35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcSinH</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcSinH</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcSinH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcSinH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:0.721225</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcSinH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcSinH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="52" column="1" bodyfile="Ace.cpp" bodystart="532" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a34a530e5c9e7d179fa411cb182fd4b52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcTan</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcTan</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcTan in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcTan(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.665774</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcTan for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcTan of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="53" column="1" bodyfile="Ace.cpp" bodystart="579" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2360cc88ef910ae6eff49033072e5273" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcTan</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcTan</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcTan in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcTan(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.665774</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcTan for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcTan of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="54" column="1" bodyfile="Ace.cpp" bodystart="626" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab95c327492c783547e8c16c4dd9570d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcTanH</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>ArcTanH</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcTanH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/3/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcTanH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.059306</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcTanH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcTanH of numInRadians. If a mathematical error occurs or if numInRadians is less than or equal to -1 or if numInRadians is greater than or equal to 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="55" column="1" bodyfile="Ace.cpp" bodystart="674" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a3c43f19a4371770bbeacd76e8d8f5e24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcTanH</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>ArcTanH</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the ArcTanH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcTanH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.059306</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate ArcTanH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ArcTanH of numInRadians. If a mathematical error occurs or if numInRadians is less than or equal to -1 or if numInRadians is greater than or equal to 1, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="56" column="1" bodyfile="Ace.cpp" bodystart="727" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ade721fa5fb6371e4ba4863413be468c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ArcTan2</definition>
        <argsstring>(double yInRadians, double xInRadians)</argsstring>
        <name>ArcTan2</name>
        <param>
          <type>double</type>
          <declname>yInRadians</declname>
          <defname>y</defname>
        </param>
        <param>
          <type>double</type>
          <declname>xInRadians</declname>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>Calculates the ArcTan2 in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para>To compute the value, the function takes into account the sign of both arguments in order to determine the quadrant.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ArcTan2(-10.0,<sp/>5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: -1.107149</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing the proportion of the y-coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing the proportion of the x-coordinate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Arc Tangent of y/x, in radians. If y = 0 or x = 0, -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="57" column="1" bodyfile="Ace.cpp" bodystart="781" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a212a9d7345151ebaa457c693b4f110c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ArcTan2</definition>
        <argsstring>(float yInRadians, float xInRadians)</argsstring>
        <name>ArcTan2</name>
        <param>
          <type>float</type>
          <declname>yInRadians</declname>
          <defname>y</defname>
        </param>
        <param>
          <type>float</type>
          <declname>xInRadians</declname>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>Calculates the ArcTan2 in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para>To compute the value, the function takes into account the sign of both arguments in order to determine the quadrant.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ArcTan2(-10.0f,<sp/>5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: -1.107149</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing the proportion of the y-coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing the proportion of the x-coordinate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Arc Tangent of y/x, in radians. If y = 0 or x = 0, -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="58" column="1" bodyfile="Ace.cpp" bodystart="834" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a24687acdeab8af43507fea6467f29247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LONGLONG</type>
        <definition>LONGLONG Ace::CalculateFileSize</definition>
        <argsstring>(char *theFilePath)</argsstring>
        <name>CalculateFileSize</name>
        <param>
          <type>char *</type>
          <declname>theFilePath</declname>
        </param>
        <briefdescription>
<para>Uses fseek() to calculate the size of the file by moving the file pointer to the end. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>fileSize<sp/>=<sp/>Ace::CalculateFileSize(&quot;C:\\Dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>fileSize<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
</programlisting> Output:37</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">theFile</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the File.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of the file in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="59" column="1" bodyfile="Ace.cpp" bodystart="883" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1adb5ff5f5dff024aa0d089bb2a018f8a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LONGLONG</type>
        <definition>LONGLONG Ace::CalculateFileSize</definition>
        <argsstring>(wchar_t *theFilePath)</argsstring>
        <name>CalculateFileSize</name>
        <param>
          <type>wchar_t *</type>
          <declname>theFilePath</declname>
        </param>
        <briefdescription>
<para>Gets the size of the file in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>fileSize<sp/>=<sp/>Ace::CalculateFileSize(L&quot;C:\\Dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>fileSize<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
</programlisting> Output:37</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">theFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The full file path.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of the file in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="60" column="1" bodyfile="Ace.cpp" bodystart="914" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab8cc0635c5777ced01f1cd35948bafa2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Ceiling</definition>
        <argsstring>(double num)</argsstring>
        <name>Ceiling</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the smallest integer value greater than or equal to num. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Ceiling(1.01);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smallest integral value not less than num. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="61" column="1" bodyfile="Ace.cpp" bodystart="946" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a00736bf27104bf30fa2f3c4a463657ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Ceiling</definition>
        <argsstring>(float num)</argsstring>
        <name>Ceiling</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the smallest integer value greater than or equal to num. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Ceiling(1.01f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smallest integral value not less than num. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="62" column="1" bodyfile="Ace.cpp" bodystart="992" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a63f81ff2236e723a0d84bd60dae9bb05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Ace::CharAt</definition>
        <argsstring>(char *str, int index)</argsstring>
        <name>CharAt</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a single character in str at a specified index. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>temp<sp/>=<sp/>Ace::CharAt(data,<sp/>11);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:e</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of what character to get.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A single character from str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="63" column="1" bodyfile="Ace.cpp" bodystart="1039" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a10123c2253ad11233dfe03584aa279c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t</type>
        <definition>wchar_t Ace::CharAt</definition>
        <argsstring>(wchar_t *str, int index)</argsstring>
        <name>CharAt</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a single character in str at a specified index. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t<sp/>temp<sp/>=<sp/>Ace::CharAt(data,<sp/>11);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:e</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of what character to get.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A single character from str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="64" column="1" bodyfile="Ace.cpp" bodystart="1071" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a6905860b7a53563ab3c73b89e25160da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ComplementaryErrorFunction</definition>
        <argsstring>(double num)</argsstring>
        <name>ComplementaryErrorFunction</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Complementary Error Function integral from num to infinity in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ComplementaryErrorFunction(1.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.157299</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point for the integral.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the Complementary Error Function integral. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="65" column="1" bodyfile="Ace.cpp" bodystart="1103" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a611ec18e97b274af873f785a557808e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ComplementaryErrorFunction</definition>
        <argsstring>(float num)</argsstring>
        <name>ComplementaryErrorFunction</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Complementary Error Function integral from num to infinity in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ComplementaryErrorFunction(1.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.157299</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point for the integral.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the Complementary Error Function integral. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="66" column="1" bodyfile="Ace.cpp" bodystart="1150" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a940cef052ddd6f308129a20fa2489d03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ConcatenateStrings</definition>
        <argsstring>(int numStrings, char **stringArray)</argsstring>
        <name>ConcatenateStrings</name>
        <param>
          <type>int</type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
<para>Appends an array of strings together and returns the combined string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char**<sp/>stringArray<sp/>=<sp/>(char**)_aligned_malloc(4<sp/>*<sp/>sizeof(char*),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stringArray[currIndex]<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>completeStr<sp/>=<sp/>Ace::ConcatenateStrings(4,<sp/>stringArray);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(stringArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(stringArray);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverythingEverything</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to append. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of strings to append.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="67" column="1" bodyfile="Ace.cpp" bodystart="1207" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4d5ee021b1049844d690a884aa3beb31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConcatenateStrings</definition>
        <argsstring>(int numStrings, wchar_t **stringArray)</argsstring>
        <name>ConcatenateStrings</name>
        <param>
          <type>int</type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
<para>Appends an array of strings together and returns the combined string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal"><sp/><sp/>wchar_t**<sp/>stringArray<sp/>=<sp/>(wchar_t**)_aligned_malloc(4<sp/>*<sp/>sizeof(wchar_t*),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stringArray[currIndex]<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>completeStr<sp/>=<sp/>Ace::ConcatenateStrings(4,<sp/>stringArray);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_aligned_free(stringArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(stringArray);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverythingEverything</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to append. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of strings to append.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="68" column="1" bodyfile="Ace.cpp" bodystart="1281" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8699d2d8921db243252650adde40c999" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ConcatenateStrings</definition>
        <argsstring>(vector&lt; char * &gt; stringVectorArray)</argsstring>
        <name>ConcatenateStrings</name>
        <param>
          <type>vector&lt; char * &gt;</type>
          <declname>stringVectorArray</declname>
        </param>
        <briefdescription>
<para>Appends a vector array of strings together and returns the combined string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">vector&lt;char*&gt;<sp/>stringVectorArray;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>1;<sp/>currIndex<sp/>&lt;=<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stringVectorArray.push_back(&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>completeStr<sp/>=<sp/>Ace::ConcatenateStrings(stringVectorArray);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverythingEverything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stringVectorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector array of strings to append.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="69" column="1" bodyfile="Ace.cpp" bodystart="1349" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a061739b0be1e26fcf5fc84d09fa9bd5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConcatenateStrings</definition>
        <argsstring>(vector&lt; wchar_t * &gt; stringVectorArray)</argsstring>
        <name>ConcatenateStrings</name>
        <param>
          <type>vector&lt; wchar_t * &gt;</type>
          <declname>stringVectorArray</declname>
        </param>
        <briefdescription>
<para>Appends a vector array of wide strings together and returns the combined wide string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">vector&lt;wchar_t*&gt;<sp/>stringVectorArray;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>1;<sp/>currIndex<sp/>&lt;=<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stringVectorArray.push_back(L&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>completeStr<sp/>=<sp/>Ace::ConcatenateStrings(stringVectorArray);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverythingEverything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stringVectorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector array of strings to append.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="70" column="1" bodyfile="Ace.cpp" bodystart="1404" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a54627c41eea2730839d98f33542a5492" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::Concatenate</definition>
        <argsstring>(int numStrings,...)</argsstring>
        <name>Concatenate</name>
        <param>
          <type>int</type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Appends a series of strings together. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>completeStr<sp/>=<sp/>Ace::Concatenate(3,<sp/>&quot;Everything&quot;,<sp/>&quot;Everything&quot;,<sp/>&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to append. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments providing additional strings.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="71" column="1" bodyfile="Ace.cpp" bodystart="1455" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af0cd7dce3668bd1ee3e9f86b687caa5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConcatenateW</definition>
        <argsstring>(int numWideStrings,...)</argsstring>
        <name>ConcatenateW</name>
        <param>
          <type>int</type>
          <declname>numWideStrings</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Appends a series of strings together. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>completeStr<sp/>=<sp/>Ace::ConcatenateW(3,<sp/>L&quot;Everything&quot;,<sp/>L&quot;Everything&quot;,<sp/>L&quot;Everything&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>completeStr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(completeStr);</highlight></codeline>
</programlisting> Output:EverythingEverythingEverything.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings to append. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments providing additional strings.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A combined string of all the strings in the arguments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="72" column="1" bodyfile="Ace.cpp" bodystart="1493" bodyend="1510"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af8c652e46bc6729b5619d794101540a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::Contains</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>Contains</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor and returns true if found. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/26/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>result<sp/>=<sp/>Ace::Contains(&quot;My<sp/>name<sp/>is<sp/>Eddie<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>&quot;Eddie&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Contains<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Does<sp/>not<sp/>contain<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Contains the word.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strToSearch contains strToLookFor, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="73" column="1" bodyfile="Ace.cpp" bodystart="1539" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac0c4f1f93bb980eaf627a1dde757765d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::Contains</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>Contains</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor and returns true if found. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>result<sp/>=<sp/>Ace::Contains(L&quot;My<sp/>name<sp/>is<sp/>Eddie<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>L&quot;Eddie&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Contains<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Does<sp/>not<sp/>contain<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Contains the word.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strToSearch contains strToLookFor, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="74" column="1" bodyfile="Ace.cpp" bodystart="1571" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa1a0f98f4f52323b776c8da11d4af7f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::ContainsIgnoreCase</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>ContainsIgnoreCase</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor (regardless of case) and returns true if found. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/26/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>result<sp/>=<sp/>Ace::ContainsIgnoreCase(&quot;My<sp/>name<sp/>is<sp/>eddIe<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>&quot;EdDIe&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Contains<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Does<sp/>not<sp/>contain<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Contains the word.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strToSearch contains strToLookFor, &gt;false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="75" column="1" bodyfile="Ace.cpp" bodystart="1603" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a89a15437662eae89503cefc25e29a9f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::ContainsIgnoreCase</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>ContainsIgnoreCase</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor (regardless of case) and returns true if found. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>result<sp/>=<sp/>Ace::ContainsIgnoreCase(L&quot;My<sp/>name<sp/>is<sp/>eddIe<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>L&quot;EdDIe&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Contains<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Does<sp/>not<sp/>contain<sp/>the<sp/>word.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Contains the word.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strToSearch contains strToLookFor, &gt;false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="76" column="1" bodyfile="Ace.cpp" bodystart="1635" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aedf62dbbbeffecb146060a08a0fe07f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::ConvertIntToBool</definition>
        <argsstring>(int num)</argsstring>
        <name>ConvertIntToBool</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>By definition, false is equal to 0 and true is equal to anything but 0. </para>        </briefdescription>
        <detaileddescription>
<para>In other words, any positive or negative number returns true, if num is 0 then false.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>data<sp/>=<sp/>Ace::ConvertIntToBool(0);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(data<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:false</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to determine if true or false.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true or false based on the value of num. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="77" column="1" bodyfile="Ace.cpp" bodystart="1666" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ace7ef8961e95078c69f2058025960c09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; char * &gt;</type>
        <definition>vector&lt; char * &gt; Ace::ConvertStringArrayToStringVectorArray</definition>
        <argsstring>(char **stringArray)</argsstring>
        <name>ConvertStringArrayToStringVectorArray</name>
        <param>
          <type>char **</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
<para>Converts a traditional string array to a vector string array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char**<sp/>strArray<sp/>=<sp/>(char**)_aligned_malloc(4<sp/>*<sp/>sizeof(char*),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>strArray[currIndex]<sp/>=<sp/>(char*)_aligned_malloc(32<sp/>*<sp/>sizeof(char),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>memset(strArray[currIndex],<sp/>0,<sp/>32<sp/>*<sp/>sizeof(char));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_itoa_s(currIndex,<sp/>strArray[currIndex],<sp/>32,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">vector&lt;char*&gt;<sp/>stringVectorArray<sp/>=<sp/>Ace::ConvertStringArrayToStringVectorArray(strArray);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;strVectorArray[%d]:%s\n&quot;,<sp/>currIndex,<sp/>stringVectorArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(strArray);</highlight></codeline>
</programlisting> Output:strVectorArray[0]:0 strVectorArray[1]:1 strVectorArray[2]:2 strVectorArray[3]:3</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The string array to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string vector array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="78" column="1" bodyfile="Ace.cpp" bodystart="1710" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1afdfed76bad657496dd0b9d18e887048b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; wchar_t * &gt;</type>
        <definition>vector&lt; wchar_t * &gt; Ace::ConvertStringArrayToStringVectorArray</definition>
        <argsstring>(wchar_t **stringArray)</argsstring>
        <name>ConvertStringArrayToStringVectorArray</name>
        <param>
          <type>wchar_t **</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
<para>Converts a traditional wide string array to a vector wide string array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal"><sp/><sp/>wchar_t**<sp/>strArray<sp/>=<sp/>(wchar_t**)_aligned_malloc(4<sp/>*<sp/>sizeof(wchar_t*),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>strArray[currIndex]<sp/>=<sp/>(wchar_t*)_aligned_malloc(32<sp/>*<sp/>sizeof(wchar_t),<sp/>16);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>memset(strArray[currIndex],<sp/>0,<sp/>32<sp/>*<sp/>sizeof(wchar_t));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_itow_s(currIndex,<sp/>strArray[currIndex],<sp/>32,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">vector&lt;wchar_t*&gt;<sp/>stringVectorArray<sp/>=<sp/>Ace::ConvertStringArrayToStringVectorArray(strArray);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>4;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;strVectorArray[%d]:%S\n&quot;,<sp/>currIndex,<sp/>stringVectorArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_aligned_free(strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(strArray);</highlight></codeline>
</programlisting> Output:strVectorArray[0]:0 strVectorArray[1]:1 strVectorArray[2]:2 strVectorArray[3]:3</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string array to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A wide string vector array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="79" column="1" bodyfile="Ace.cpp" bodystart="1757" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9399ba5c75c6aa92dac1a8d1d9f4af61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::ConvertStringToBool</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertStringToBool</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a given string to a bool, If str is a string like &quot;False&quot;, &quot;FALSE&quot;, or &quot;tRuE&quot;, then the function will return false, false, true respectively. </para>        </briefdescription>
        <detaileddescription>
<para>If str is an integer for example; &quot;0&quot; will return false and any other number will return true.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>data<sp/>=<sp/>Ace::ConvertStringToBool(&quot;tRuE&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(data<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if str is equal to &quot;true&quot; (any case combination) or if str is an integer not equal to 0; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="80" column="1" bodyfile="Ace.cpp" bodystart="1800" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7b8a182a0d284265930026487405653a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::ConvertStringToBool</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertStringToBool</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a given wide string to a bool, If str is a wide string like &quot;False&quot;, &quot;FALSE&quot;, or &quot;tRuE&quot;, then the function will return false, false, true respectively. </para>        </briefdescription>
        <detaileddescription>
<para>If str is an integer for example; &quot;0&quot; will return false and any other number will return true.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>data<sp/>=<sp/>Ace::ConvertStringToBool(L&quot;tRuE&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(data<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if str is equal to &quot;true&quot; (any case combination) or if str is an integer not equal to 0; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="81" column="1" bodyfile="Ace.cpp" bodystart="1874" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2dd19dedc9fa4b83a8db2115fc3b65bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * Ace::ConvertStringToFloatArray</definition>
        <argsstring>(char *strToConvert, char *delimiter, int &amp;outNumItems)</argsstring>
        <name>ConvertStringToFloatArray</name>
        <param>
          <type>char *</type>
          <declname>strToConvert</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outNumItems</declname>
        </param>
        <briefdescription>
<para>Converts a tokenized string (a string with commas separating numbers for example) to an array of floats. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/26/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>numItems<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>strPosition<sp/>=<sp/>&quot;0.0,<sp/>1.0f,<sp/>2.0&quot;;</highlight></codeline>
<codeline><highlight class="normal">float*<sp/>floatArray<sp/>=<sp/>Ace::ConvertStringToFloatArray(strPosition,<sp/>&quot;,&quot;,<sp/>numItems);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numItems;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;floatArray[%d]:<sp/>%f\n&quot;,<sp/>currIndex,<sp/>floatArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(floatArray);</highlight></codeline>
</programlisting> Output:floatArray[0]: 0.000000 floatArray[1]: 1.000000 floatArray[2]: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>String that separates each number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outNumItems</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated array of floats. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="82" column="1" bodyfile="Ace.cpp" bodystart="1948" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a561b5633460e1f395b6e6fd12ab455f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * Ace::ConvertStringToFloatArray</definition>
        <argsstring>(wchar_t *strToConvert, wchar_t *delimiter, int &amp;outNumItems)</argsstring>
        <name>ConvertStringToFloatArray</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToConvert</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outNumItems</declname>
        </param>
        <briefdescription>
<para>Converts a tokenized wide string (a string with commas separating numbers for example) to an array of floats. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>numItems<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>strPosition<sp/>=<sp/>L&quot;0.0,<sp/>1.0f,<sp/>2.0&quot;;</highlight></codeline>
<codeline><highlight class="normal">float*<sp/>floatArray<sp/>=<sp/>Ace::ConvertStringToFloatArray(strPosition,<sp/>L&quot;,&quot;,<sp/>numItems);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numItems;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;floatArray[%d]:<sp/>%f\n&quot;,<sp/>currIndex,<sp/>floatArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(floatArray);</highlight></codeline>
</programlisting> Output:floatArray[0]: 0.000000 floatArray[1]: 1.000000 floatArray[2]: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>String that separates each number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outNumItems</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated array of floats. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="83" column="1" bodyfile="Ace.cpp" bodystart="2005" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9735962c53182de52caffda3b7dd091f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Ace::ConvertStringToHex</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertStringToHex</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to its hex value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">unsigned<sp/>int<sp/>data<sp/>=<sp/>Ace::ConvertStringToHex(&quot;0xDEADBEEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Hex<sp/>Value:<sp/>%x\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Integer<sp/>Value:<sp/>%u\n&quot;,<sp/>data);</highlight></codeline>
</programlisting> Output:Hex Value: deadbeef Integer Value: 305419896.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert to hex.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hex value of the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="84" column="1" bodyfile="Ace.cpp" bodystart="2053" bodyend="2061"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa575665aa3bc6f2366fabd3bdec04e25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Ace::ConvertStringToHex</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertStringToHex</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to its hex value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">unsigned<sp/>int<sp/>data<sp/>=<sp/>Ace::ConvertStringToHex(L&quot;0xDEADBEEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Hex<sp/>Value:<sp/>%x\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Integer<sp/>Value:<sp/>%u\n&quot;,<sp/>data);</highlight></codeline>
</programlisting> Output:Hex Value: deadbeef Integer Value: 305419896.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert to hex.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hex value of the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="85" column="1" bodyfile="Ace.cpp" bodystart="2082" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a27a4d4bc0cfe1b489582bf937e27d0e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ConvertStringToOneLine</definition>
        <argsstring>(char *strToConvert)</argsstring>
        <name>ConvertStringToOneLine</name>
        <param>
          <type>char *</type>
          <declname>strToConvert</declname>
        </param>
        <briefdescription>
<para>Converts a traditional string to a traditional string that is all on one line, In other words; this function removes any occurrence of <linebreak/>
 from stringToConvert. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/12/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Krusty\nKrab\nUn-Fair\n!&quot;;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>oneLineData<sp/>=<sp/>Ace::ConvertStringToOneLine(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>oneLineData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(oneLineData);</highlight></codeline>
</programlisting> Output:KrustyKrabUn-Fair!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert to one line.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string with every occurrence of <linebreak/>
 removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="86" column="1" bodyfile="Ace.cpp" bodystart="2112" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a41c562a99b2eae02bed5d5c76b5ab8d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConvertStringToOneLine</definition>
        <argsstring>(wchar_t *strToConvert)</argsstring>
        <name>ConvertStringToOneLine</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToConvert</declname>
        </param>
        <briefdescription>
<para>Converts a traditional wide string to a traditional wide string that is all on one line, In other words; this function removes any occurrence of <linebreak/>
 from stringToConvert. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Krusty\nKrab\nUn-Fair\n!&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>oneLineData<sp/>=<sp/>Ace::ConvertStringToOneLine(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>oneLineData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(oneLineData);</highlight></codeline>
</programlisting> Output:KrustyKrabUn-Fair!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to convert to one line.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A wide string with every occurrence of <linebreak/>
 removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="87" column="1" bodyfile="Ace.cpp" bodystart="2145" bodyend="2156"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4ad8d96d9b8bad51a4364ae67fce4b73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertStringToOneLineInPlace</definition>
        <argsstring>(char *strToConvert)</argsstring>
        <name>ConvertStringToOneLineInPlace</name>
        <param>
          <type>char *</type>
          <declname>strToConvert</declname>
        </param>
        <briefdescription>
<para>Converts a traditional string to a traditional string that is all on one line, In other words; this function removes any occurrence of <linebreak/>
 from stringToConvert. </para>        </briefdescription>
        <detaileddescription>
<para>strToConvert must be an allocated string since this function works directly on it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/12/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>oneLineData<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;Krusty\nKrab\nUn-Fair\n!&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertStringToOneLineInPlace(oneLineData);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>oneLineData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(oneLineData);</highlight></codeline>
</programlisting> Output:KrustyKrabUn-Fair!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to directly convert to one line. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="88" column="1" bodyfile="Ace.cpp" bodystart="2177" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a6ab37e5c15b1cc6595fb2865c7fc12b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertStringToOneLineInPlace</definition>
        <argsstring>(wchar_t *strToConvert)</argsstring>
        <name>ConvertStringToOneLineInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToConvert</declname>
        </param>
        <briefdescription>
<para>Converts a traditional wide string to a traditional wide string that is all on one line, In other words; this function removes any occurrence of <linebreak/>
 from stringToConvert. </para>        </briefdescription>
        <detaileddescription>
<para>strToConvert must be an allocated wide string since this function works directly on it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>oneLineData<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;Krusty\nKrab\nUn-Fair\n!&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertStringToOneLineInPlace(oneLineData);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>oneLineData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(oneLineData);</highlight></codeline>
</programlisting> Output:KrustyKrabUn-Fair!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to directly convert to one line. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="89" column="1" bodyfile="Ace.cpp" bodystart="2204" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1adebec5fecf3c418346f7e7233cac91f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConvertStringToWCharString</definition>
        <argsstring>(const char *strToConvert)</argsstring>
        <name>ConvertStringToWCharString</name>
        <param>
          <type>const char *</type>
          <declname>strToConvert</declname>
        </param>
        <briefdescription>
<para>Converts a traditional string to a wide string. </para>        </briefdescription>
        <detaileddescription>
<para>A wide string is a string containing Unicode characters (non English).</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/25/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>normalString<sp/>=<sp/>&quot;The<sp/>ceiling<sp/>is<sp/>right<sp/>Squidward.&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>wideString<sp/>=<sp/>Ace::ConvertStringToWCharString(normalString);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Wide<sp/>string:<sp/>%S\n&quot;,<sp/>wideString);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(wideString);</highlight></codeline>
</programlisting> Output:Wide string: The ceiling is right Squidward.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToConvert</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert to a wide string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null if it fails, else the string converted to w character string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="90" column="1" bodyfile="Ace.cpp" bodystart="2232" bodyend="2261"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5b925726cd02b9a41f8648173b8a4cd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** Ace::ConvertStringVectorArrayToStringArray</definition>
        <argsstring>(vector&lt; char * &gt; stringVectorArray)</argsstring>
        <name>ConvertStringVectorArrayToStringArray</name>
        <param>
          <type>vector&lt; char * &gt;</type>
          <declname>stringVectorArray</declname>
        </param>
        <briefdescription>
<para>Converts a string vector array to a traditional string array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">vector&lt;char*&gt;<sp/>strVectorArray;</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(&quot;My&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(&quot;name&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(&quot;is&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(&quot;Eddie.&quot;);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numStrs<sp/>=<sp/>strVectorArray.size();</highlight></codeline>
<codeline><highlight class="normal">char**<sp/>strArray<sp/>=<sp/>Ace::ConvertStringVectorArrayToStringArray(strVectorArray);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numStrs;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%s\n&quot;,<sp/>currIndex,<sp/>strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(strArray);</highlight></codeline>
</programlisting> Output:Array[0]:My Array[1]:name Array[2]:is Array[3]:Eddie.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stringVectorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The string vector array to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created traditional string array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="91" column="1" bodyfile="Ace.cpp" bodystart="2294" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7188a081ac708dc23678f3c5d56decb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t **</type>
        <definition>wchar_t ** Ace::ConvertStringVectorArrayToStringArray</definition>
        <argsstring>(vector&lt; wchar_t * &gt; stringVectorArray)</argsstring>
        <name>ConvertStringVectorArrayToStringArray</name>
        <param>
          <type>vector&lt; wchar_t * &gt;</type>
          <declname>stringVectorArray</declname>
        </param>
        <briefdescription>
<para>Converts a wide string vector array to a traditional wide string array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">vector&lt;wchar_t*&gt;<sp/>strVectorArray;</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(L&quot;My&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(L&quot;name&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(L&quot;is&quot;);</highlight></codeline>
<codeline><highlight class="normal">strVectorArray.push_back(L&quot;Eddie.&quot;);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numStrs<sp/>=<sp/>strVectorArray.size();</highlight></codeline>
<codeline><highlight class="normal">wchar_t**<sp/>strArray<sp/>=<sp/>Ace::ConvertStringVectorArrayToStringArray(strVectorArray);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numStrs;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%S\n&quot;,<sp/>currIndex,<sp/>strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(strArray[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(strArray);</highlight></codeline>
</programlisting> Output:Array[0]:My Array[1]:name Array[2]:is Array[3]:Eddie.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stringVectorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The string vector array to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created traditional string array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="92" column="1" bodyfile="Ace.cpp" bodystart="2352" bodyend="2377"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a28cad743308ecbc46147e0203e2b14f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ConvertToLowerCase</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertToLowerCase</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to all lowercase letters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::ConvertToLowerCase(&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:abcdef</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to determine if true or false.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true or false based on the value of str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="93" column="1" bodyfile="Ace.cpp" bodystart="2397" bodyend="2408"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aebe68e4280058616f63de68936cee206" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConvertToLowerCase</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertToLowerCase</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a wide string to all lowercase letters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::ConvertToLowerCase(L&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:abcdef</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to determine if true or false.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true or false based on the value of str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="94" column="1" bodyfile="Ace.cpp" bodystart="2428" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a040b39d22ec0282b5a4185aba3e37633" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertToLowerCaseInPlace</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertToLowerCaseInPlace</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Directly modifies str to have all its letters converted to lower case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertToLowerCaseInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:abcdef</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to determine if true or false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="95" column="1" bodyfile="Ace.cpp" bodystart="2458" bodyend="2470"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a756a560a676102e318b403f4cd12a750" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertToLowerCaseInPlace</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertToLowerCaseInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Directly modifies str to have all its letters converted to lower case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertToLowerCaseInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:abcdef</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to determine if true or false. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="96" column="1" bodyfile="Ace.cpp" bodystart="2489" bodyend="2501"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a06f1154d2ce1775f53931aaf94c93f99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ConvertToUpperCase</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertToUpperCase</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to all uppercase letters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::ConvertToUpperCase(&quot;abcdef&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:ABCDEF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to determine if true or false.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing all the letters in str in uppercase. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="97" column="1" bodyfile="Ace.cpp" bodystart="2521" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a1fc45db42de7183ab5ec93a90a3f8cc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ConvertToUpperCase</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertToUpperCase</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to all uppercase letters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::ConvertToUpperCase(L&quot;abcdef&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:ABCDEF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to determine if true or false.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing all the letters in str in uppercase. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="98" column="1" bodyfile="Ace.cpp" bodystart="2552" bodyend="2563"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4ce18b5ec8b3acce9219938b2d07af0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertToUpperCaseInPlace</definition>
        <argsstring>(char *str)</argsstring>
        <name>ConvertToUpperCaseInPlace</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Directly modifies str to have all its letters converted to upper case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;abcdef&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertToUpperCaseInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:ABCDEF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert to all uppercase letters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="99" column="1" bodyfile="Ace.cpp" bodystart="2582" bodyend="2594"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab11cca7bc0da989b9bf6bd1158601fdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ConvertToUpperCaseInPlace</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>ConvertToUpperCaseInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Directly modifies str to have all its letters converted to upper case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;abcdef&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ConvertToUpperCaseInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:ABCDEF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert to all uppercase letters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="100" column="1" bodyfile="Ace.cpp" bodystart="2613" bodyend="2625"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a59f079afef33f0a7bed749afbf777c36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Cos</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>Cos</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the Cosine (cos) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265358979;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Cos(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output:0.707107</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in radians to take the cosine of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cosine of the numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="101" column="1" bodyfile="Ace.cpp" bodystart="2647" bodyend="2673"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a55bebe92cca4c2a94f2cb30431475dea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Cos</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>Cos</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the Cosine (cos) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265358979f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Cos(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output:0.707107</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in radians to take the cosine of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cosine of the numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="102" column="1" bodyfile="Ace.cpp" bodystart="2695" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2a3e08791d5a9e794a02c118daca3402" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::CosH</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>CosH</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the CosH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::CosH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.324609</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate CosH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CosH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="103" column="1" bodyfile="Ace.cpp" bodystart="2742" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a428056578b18e534a419d4fde48c1fef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::CosH</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>CosH</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the CosH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::CosH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.324609</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate CosH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CosH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="104" column="1" bodyfile="Ace.cpp" bodystart="2789" bodyend="2815"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4202759241426cfbbc2c15b5ea218ec8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::CountNumOccurrences</definition>
        <argsstring>(char *strToSearch, char charToLookFor)</argsstring>
        <name>CountNumOccurrences</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char</type>
          <declname>charToLookFor</declname>
        </param>
        <briefdescription>
<para>Counts the number of times charToLookFor appears in strToSearch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/11/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numOccurences<sp/>=<sp/>Ace::CountNumOccurrences(data,<sp/>&apos;e&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Number<sp/>of<sp/>occurrences<sp/>of<sp/>%c:<sp/>%d\n&quot;,<sp/>&apos;e&apos;,<sp/>numOccurences);</highlight></codeline>
</programlisting> Output:Number of occurrences of e: 13</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">charToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>A string character to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of times charToLookFor occurred in strToSearch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="105" column="1" bodyfile="Ace.cpp" bodystart="2836" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad46096b28cff4e653243e0a0a3656f59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::CountNumOccurrences</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t charToLookFor)</argsstring>
        <name>CountNumOccurrences</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>charToLookFor</declname>
        </param>
        <briefdescription>
<para>Counts the number of times charToLookFor appears in strToSearch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numOccurences<sp/>=<sp/>Ace::CountNumOccurrences(data,<sp/>L&apos;e&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Number<sp/>of<sp/>occurrences<sp/>of<sp/>%c:<sp/>%d\n&quot;,<sp/>L&apos;e&apos;,<sp/>numOccurences);</highlight></codeline>
</programlisting> Output:Number of occurrences of e: 13</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string containing the data to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">charToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide character to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of times charToLookFor occurred in strToSearch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="106" column="1" bodyfile="Ace.cpp" bodystart="2873" bodyend="2889"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad9d6a9afe8007466f657522d9492dc89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::CountNumOccurrences</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>CountNumOccurrences</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Counts the number of times strToLookFor appears in strToSearch. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes itemToLookFor is always smaller than word.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numOccurences<sp/>=<sp/>Ace::CountNumOccurrences(data,<sp/>&quot;as&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Number<sp/>of<sp/>occurrences<sp/>of<sp/>%s:<sp/>%d&quot;,<sp/>&quot;as&quot;,<sp/>numOccurences);</highlight></codeline>
</programlisting> Output:Number of occurrences of as: 3</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the substring to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of times strToLookFor occurred in strToSearch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="107" column="1" bodyfile="Ace.cpp" bodystart="2911" bodyend="2946"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aafbcb7320a4d903a15ef1039c78bd131" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::CountNumOccurrences</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>CountNumOccurrences</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Counts the number of times strToLookFor appears in strToSearch. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes itemToLookFor is always smaller than word.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>numOccurences<sp/>=<sp/>Ace::CountNumOccurrences(data,<sp/>L&quot;as&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Number<sp/>of<sp/>occurrences<sp/>of<sp/>%S:<sp/>%d&quot;,<sp/>L&quot;as&quot;,<sp/>numOccurences);</highlight></codeline>
</programlisting> Output:Number of occurrences of as: 3</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string containing the data to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string representing the substring to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of times strToLookFor occurred in strToSearch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="108" column="1" bodyfile="Ace.cpp" bodystart="2968" bodyend="3003"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abf907ab5be1efd6f81532d2cb9f2a809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::CubeRoot</definition>
        <argsstring>(double num)</argsstring>
        <name>CubeRoot</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Cube Root in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::CubeRoot(1728.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 12.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to take the Cube Root of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Cube Root of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="109" column="1" bodyfile="Ace.cpp" bodystart="3023" bodyend="3049"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aace71b982b1bdb3ed617b32e01335140" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::CubeRoot</definition>
        <argsstring>(float num)</argsstring>
        <name>CubeRoot</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Cube Root in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::CubeRoot(1728.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 12.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to take the Cube Root of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Cube Root of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="110" column="1" bodyfile="Ace.cpp" bodystart="3069" bodyend="3095"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad4386a90f9491cc97945787e15e7554c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::DegreesToRadians</definition>
        <argsstring>(double degrees)</argsstring>
        <name>DegreesToRadians</name>
        <param>
          <type>double</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Converts a number from degrees to radians. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/16/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>deg<sp/>=<sp/>90.0;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>rad<sp/>=<sp/>Ace::DegreesToRadians(deg);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>rad);</highlight></codeline>
</programlisting> Output:1.570796</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Degrees to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="111" column="1" bodyfile="Ace.cpp" bodystart="3115" bodyend="3118"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a30d2e65624fcc7f6143bf16955f9fabd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::DegreesToRadians</definition>
        <argsstring>(float degrees)</argsstring>
        <name>DegreesToRadians</name>
        <param>
          <type>float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Converts a number from degrees to radians. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>deg<sp/>=<sp/>90.0f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>rad<sp/>=<sp/>Ace::DegreesToRadians(deg);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>rad);</highlight></codeline>
</programlisting> Output:1.570796</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Degrees to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="112" column="1" bodyfile="Ace.cpp" bodystart="3138" bodyend="3141"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a63153a0d492cb0cbe3a4cd69fee74684" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::DoesFileExist</definition>
        <argsstring>(char *fullFilePathWithNameAndExt)</argsstring>
        <name>DoesFileExist</name>
        <param>
          <type>char *</type>
          <declname>fullFilePathWithNameAndExt</declname>
        </param>
        <briefdescription>
<para>Returns true if the specified file exists, false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::DoesFileExist(&quot;C:\\Images\\dickbutt.png&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;File<sp/>exists.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;File<sp/>does<sp/>NOT<sp/>exist.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:File does NOT exist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePathWithNameAndExt</parametername>
</parameternamelist>
<parameterdescription>
<para>File to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the specified file exists, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="113" column="1" bodyfile="Ace.cpp" bodystart="3166" bodyend="3170"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8391ff72632a4406b4cf1b8936bd908d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::DoesFileExist</definition>
        <argsstring>(wchar_t *fullFilePathWithNameAndExt)</argsstring>
        <name>DoesFileExist</name>
        <param>
          <type>wchar_t *</type>
          <declname>fullFilePathWithNameAndExt</declname>
        </param>
        <briefdescription>
<para>Returns true if the specified file exists, false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::DoesFileExist(L&quot;C:\\Images\\dickbutt.png&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;File<sp/>exists.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;File<sp/>does<sp/>NOT<sp/>exist.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:File does NOT exist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePathWithNameAndExt</parametername>
</parameternamelist>
<parameterdescription>
<para>File to check.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the specified file exists, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="114" column="1" bodyfile="Ace.cpp" bodystart="3195" bodyend="3199"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa522bbdb8b2d83603bf89f64714f4d89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::ErrorFunction</definition>
        <argsstring>(double num)</argsstring>
        <name>ErrorFunction</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Error Function integral from 0 to num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::ErrorFunction(1.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.842701</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>End point for the integral.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the Error Function from 0 to num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="115" column="1" bodyfile="Ace.cpp" bodystart="3220" bodyend="3246"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a93a5ce3eee3f3fabb6fa3a0ac9b2c8c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::ErrorFunction</definition>
        <argsstring>(float num)</argsstring>
        <name>ErrorFunction</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Error Function integral from 0 to num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::ErrorFunction(1.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.842701</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>End point for the integral.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the Error Function from 0 to num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="116" column="1" bodyfile="Ace.cpp" bodystart="3267" bodyend="3293"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a986a84d68783456d3c97b467cece5635" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::Equals</definition>
        <argsstring>(char *strToCompOne, char *strToCompTwo)</argsstring>
        <name>Equals</name>
        <param>
          <type>char *</type>
          <declname>strToCompOne</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToCompTwo</declname>
        </param>
        <briefdescription>
<para>Compares two traditional strings together. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/16/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>strOne<sp/>=<sp/>&quot;Eddie&quot;;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>strTwo<sp/>=<sp/>&quot;Katianie&quot;;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(Ace::Equals(strOne,<sp/>strTwo)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Strings<sp/>are<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Strings<sp/>are<sp/>NOT<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Strings are NOT equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToCompOne</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToCompTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the strings are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="117" column="1" bodyfile="Ace.cpp" bodystart="3321" bodyend="3329"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a613fd5b028d5ba0ac5c7de30ab744266" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::Equals</definition>
        <argsstring>(wchar_t *strToCompOne, wchar_t *strToCompTwo)</argsstring>
        <name>Equals</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToCompOne</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToCompTwo</declname>
        </param>
        <briefdescription>
<para>Compares two traditional wide strings together. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>strOne<sp/>=<sp/>L&quot;Eddie&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>strTwo<sp/>=<sp/>L&quot;Katianie&quot;;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(Ace::Equals(strOne,<sp/>strTwo)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Strings<sp/>are<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Strings<sp/>are<sp/>NOT<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Strings are NOT equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToCompOne</parametername>
</parameternamelist>
<parameterdescription>
<para>First wide string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToCompTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Second wide string to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the wide strings are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="118" column="1" bodyfile="Ace.cpp" bodystart="3357" bodyend="3365"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5310b61a074383bf2ee4df005c6784e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::EqualsIgnoreCase</definition>
        <argsstring>(char *strToCompOne, char *strToCompTwo)</argsstring>
        <name>EqualsIgnoreCase</name>
        <param>
          <type>char *</type>
          <declname>strToCompOne</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToCompTwo</declname>
        </param>
        <briefdescription>
<para>Compares two traditional strings together but ignores upper/lower case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/16/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>strOne<sp/>=<sp/>&quot;Katianie&quot;;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>strTwo<sp/>=<sp/>&quot;kATIaNiE&quot;;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(Ace::EqualsIgnoreCase(strOne,<sp/>strTwo)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Strings<sp/>are<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;Strings<sp/>are<sp/>NOT<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Strings are equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToCompOne</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToCompTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the strings are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="119" column="1" bodyfile="Ace.cpp" bodystart="3393" bodyend="3412"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abef72240bed5aa10df9b9f8bceec3bb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::EqualsIgnoreCase</definition>
        <argsstring>(wchar_t *strToCompOne, wchar_t *strToCompTwo)</argsstring>
        <name>EqualsIgnoreCase</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToCompOne</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToCompTwo</declname>
        </param>
        <briefdescription>
<para>Compares two traditional wide strings together but ignores upper/lower case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>strOne<sp/>=<sp/>L&quot;Katianie&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>strTwo<sp/>=<sp/>L&quot;kATIaNiE&quot;;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(Ace::EqualsIgnoreCase(strOne,<sp/>strTwo)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Strings<sp/>are<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;Strings<sp/>are<sp/>NOT<sp/>equal.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:Strings are equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToCompOne</parametername>
</parameternamelist>
<parameterdescription>
<para>First wide string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToCompTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Second wide string to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the strings are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="120" column="1" bodyfile="Ace.cpp" bodystart="3440" bodyend="3459"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae51ded8e8e681b85ee397e381068dbca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::EToTheXPower</definition>
        <argsstring>(double power)</argsstring>
        <name>EToTheXPower</name>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates e^x in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::EToTheXPower(5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 148.413159</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise e to (i.e. power = x in e^x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of raising e to power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="121" column="1" bodyfile="Ace.cpp" bodystart="3479" bodyend="3505"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a263f99643d5a480447b556856b016b37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::EToTheXPower</definition>
        <argsstring>(float power)</argsstring>
        <name>EToTheXPower</name>
        <param>
          <type>float</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates e^x in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::EToTheXPower(5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 148.413159</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise e to (i.e. power = x in e^x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of raising e to power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="122" column="1" bodyfile="Ace.cpp" bodystart="3525" bodyend="3551"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a50cb517fc19d73e44bb9c3cc1141d7bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::EToTheXPowerMinusOne</definition>
        <argsstring>(double power)</argsstring>
        <name>EToTheXPowerMinusOne</name>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates (e^x) - 1 in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::EToTheXPowerMinusOne(5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 147.413159</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise e to (i.e. power = x in e^x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of raising e to power then subtracting 1. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="123" column="1" bodyfile="Ace.cpp" bodystart="3571" bodyend="3597"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a544ff3061a586b5cdedddbf21287ae22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::EToTheXPowerMinusOne</definition>
        <argsstring>(float power)</argsstring>
        <name>EToTheXPowerMinusOne</name>
        <param>
          <type>float</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates (e^x) - 1 in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::EToTheXPowerMinusOne(5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 147.413159</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise e to (i.e. power = x in e^x).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of raising e to power then subtracting 1. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="124" column="1" bodyfile="Ace.cpp" bodystart="3617" bodyend="3643"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aca1a612de325a7636ef40c95b676795d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Ace::FirstChar</definition>
        <argsstring>(char *str)</argsstring>
        <name>FirstChar</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the first character in str. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>temp<sp/>=<sp/>Ace::FirstChar(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:H</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first character in str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="125" column="1" bodyfile="Ace.cpp" bodystart="3663" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0e34aae1025e81ad4684b34940a70959" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t</type>
        <definition>wchar_t Ace::FirstChar</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>FirstChar</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the first character in str. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t<sp/>temp<sp/>=<sp/>Ace::FirstChar(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:H</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first character in str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="126" column="1" bodyfile="Ace.cpp" bodystart="3691" bodyend="3699"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a509e6fda4da886680951615f2ac2d421" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Floor</definition>
        <argsstring>(double num)</argsstring>
        <name>Floor</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the largest integer value not greater than num. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Floor(2.9);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to use to calculate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The largest integer value not greater than num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="127" column="1" bodyfile="Ace.cpp" bodystart="3720" bodyend="3746"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae821a3392f3637b82112c010f060026b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Floor</definition>
        <argsstring>(float num)</argsstring>
        <name>Floor</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the largest integer value not greater than num. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Floor(2.9f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to use to calculate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The largest integer value not greater than num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="128" column="1" bodyfile="Ace.cpp" bodystart="3767" bodyend="3793"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a06b87693241afd13cfe45e052e6196f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::GammaFunction</definition>
        <argsstring>(double num)</argsstring>
        <name>GammaFunction</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates The Gamma Function ( (0)integral(Inf)[t^num-1 * e^-t dt] ) in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::GammaFunction(5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 24.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for t^num-1 in the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of calculating The Gamma Function for t^num-1. If a mathematical error occurs or if num is less than or equal to 0.0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="129" column="1" bodyfile="Ace.cpp" bodystart="3815" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1afe867fa9d28bd8f4233fd488b5e533ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::GammaFunction</definition>
        <argsstring>(float num)</argsstring>
        <name>GammaFunction</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates The Gamma Function ( (0)integral(Inf)[t^num-1 * e^-t dt] ) in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::GammaFunction(5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 24.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for t^num-1 in the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of calculating The Gamma Function for t^num-1. If a mathematical error occurs or if num is less than or equal to 0.0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="130" column="1" bodyfile="Ace.cpp" bodystart="3867" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af052dd5bee7f50a8f80f3af4375a874a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::GenerateRandomNum</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>GenerateRandomNum</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Some might think this is all unnecessary but I think it&apos;s important to seed the RandomNumberGenerator properly with a proper seed value. </para>        </briefdescription>
        <detaileddescription>
<para>Too often are games plagued with predictable outcomes all leading back to not seeding the RNG properly. Generates a &quot;super&quot; random number using a random seed at launch.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>randomNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">//Generate<sp/>10<sp/>random<sp/>numbers.</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>1;<sp/>currIndex<sp/>&lt;=<sp/>10;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>randomNum<sp/>=<sp/>Ace::GenerateRandomNum(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%d<sp/>&quot;,<sp/>randomNum);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:35 82 10 52 10 34 56 21 37 14</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest number to generate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Highest number to generate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random number between the given range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="131" column="1" bodyfile="Ace.cpp" bodystart="3925" bodyend="3957"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a913e668440d1c00f00d340519bf95a7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Hypotenuse</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>Hypotenuse</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Solves for c in Pythagoras theorem (a^2 + b^2 = c^2); i.e square root of (x^2 + y^2). </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::Hypotenuse(3.0,<sp/>4.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 5.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of one of the sides of the triangle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the other side of the triangle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Hypotenuse (the longest side) of the triangle. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="132" column="1" bodyfile="Ace.cpp" bodystart="3980" bodyend="4006"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aaa3ee98b16b39b101f3258803bc1e03d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Hypotenuse</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>Hypotenuse</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Solves for c in Pythagoras theorem (a^2 + b^2 = c^2); i.e square root of (x^2 + y^2). </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::Hypotenuse(3.0f,<sp/>4.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 5.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of one of the sides of the triangle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the other side of the triangle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Hypotenuse (the longest side) of the triangle. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="133" column="1" bodyfile="Ace.cpp" bodystart="4029" bodyend="4055"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a50a722b64f2f7a54b297cb5beae7330b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOf</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>IndexOf</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>temp<sp/>=<sp/>Ace::IndexOf(data,<sp/>&quot;been&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:16</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="134" column="1" bodyfile="Ace.cpp" bodystart="4077" bodyend="4115"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1acf9bd88f509f374f6020dc19c7a77252" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOf</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>IndexOf</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>temp<sp/>=<sp/>Ace::IndexOf(data,<sp/>L&quot;been&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:16</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="135" column="1" bodyfile="Ace.cpp" bodystart="4137" bodyend="4175"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a273501ca36610e1631ff37b2dd93cddf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOfFirstLetter</definition>
        <argsstring>(char *strToSearch)</argsstring>
        <name>IndexOfFirstLetter</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <briefdescription>
<para>Returns the first index of a letter in a given string. </para>        </briefdescription>
        <detaileddescription>
<para>For Example: &quot;23584Anus&quot; would return 5.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">printf(&quot;%d&quot;,<sp/>Ace::IndexOfFirstLetter(&quot;23584Anus&quot;));</highlight></codeline>
</programlisting> Output:5</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search for the first occurrence of a alphabetical character.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where in strToSearch the first alphabetical character was found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="136" column="1" bodyfile="Ace.cpp" bodystart="4195" bodyend="4209"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae0ec852c9eea044d4a1dcb0d03462166" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOfFirstLetter</definition>
        <argsstring>(wchar_t *strToSearch)</argsstring>
        <name>IndexOfFirstLetter</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <briefdescription>
<para>Returns the first index of a letter in a given wide string. </para>        </briefdescription>
        <detaileddescription>
<para>For Example: &quot;23584Anus&quot; would return 5.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">printf(&quot;%d&quot;,<sp/>Ace::IndexOfFirstLetter(L&quot;23584Anus&quot;));</highlight></codeline>
</programlisting> Output:5</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search for the first occurrence of a alphabetical character.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where in strToSearch the first alphabetical character was found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="137" column="1" bodyfile="Ace.cpp" bodystart="4229" bodyend="4243"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5e24b813ba1540fc92502435e4d817ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOfIgnoreCase</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>IndexOfIgnoreCase</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor (regardless of case) and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/26/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>result<sp/>=<sp/>Ace::IndexOfIgnoreCase(&quot;My<sp/>name<sp/>is<sp/>eddIe<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>&quot;EdDIe&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:11</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="138" column="1" bodyfile="Ace.cpp" bodystart="4264" bodyend="4283"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0827c26650755411f44c94920142c421" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::IndexOfIgnoreCase</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>IndexOfIgnoreCase</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the first occurrence of strToLookFor (regardless of case) and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>result<sp/>=<sp/>Ace::IndexOfIgnoreCase(L&quot;My<sp/>name<sp/>is<sp/>eddIe<sp/>and<sp/>I<sp/>like<sp/>cheese.&quot;,<sp/>L&quot;EdDIe&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output:11</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search starting from left to right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="139" column="1" bodyfile="Ace.cpp" bodystart="4304" bodyend="4323"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a488c9ea590fdf14919ad90ee1dc377ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::InsertString</definition>
        <argsstring>(char *strToReceive, char *strToInsert, int startIndex)</argsstring>
        <name>InsertString</name>
        <param>
          <type>char *</type>
          <declname>strToReceive</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToInsert</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Inserts the string strToInsert into strToRevcive by &quot;sandwiching&quot; the two halves of strToReceive. </para>        </briefdescription>
        <detaileddescription>
<para>The first half is from 0 to startIndex-1, the last half is from startIndex to the end of strToReceive.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>retVal<sp/>=<sp/>Ace::InsertString(&quot;Eddie<sp/>is<sp/>a<sp/>Computer<sp/>Scientist.&quot;,<sp/>&quot;<sp/>O\&apos;Hagan&quot;,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>retVal);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal);</highlight></codeline>
</programlisting> Output: Eddie O&apos;Hagan is a Computer Scientist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToReceive</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to receive strToInsert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to sandwich/insert into strToReceive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in strToReceive to insert at strToInsert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created string with strToInsert inserted into strToReceive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="140" column="1" bodyfile="Ace.cpp" bodystart="4347" bodyend="4368"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac4a643953262f0837db5074a66286787" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::InsertString</definition>
        <argsstring>(wchar_t *strToReceive, wchar_t *strToInsert, int startIndex)</argsstring>
        <name>InsertString</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToReceive</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToInsert</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Inserts the string strToInsert into strToRevcive by &quot;sandwiching&quot; the two halves of strToReceive. </para>        </briefdescription>
        <detaileddescription>
<para>The first half is from 0 to startIndex-1, the last half is from startIndex to the end of strToReceive.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>retVal<sp/>=<sp/>Ace::InsertString(L&quot;Eddie<sp/>is<sp/>a<sp/>Computer<sp/>Scientist.&quot;,<sp/>L&quot;<sp/>O\&apos;Hagan&quot;,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>retVal);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal);</highlight></codeline>
</programlisting> Output: Eddie O&apos;Hagan is a Computer Scientist.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToReceive</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to receive strToInsert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to sandwich/insert into strToReceive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in strToReceive to insert at strToInsert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created wide string with strToInsert inserted into strToReceive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="141" column="1" bodyfile="Ace.cpp" bodystart="4392" bodyend="4413"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aebb4f615642b84d54134e02e3fc8c083" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsAlphabetic</definition>
        <argsstring>(char character)</argsstring>
        <name>IsAlphabetic</name>
        <param>
          <type>char</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a character is a letter from either a to z or A to Z. </para>        </briefdescription>
        <detaileddescription>
<para>Letters fall into a range on the ASCII chart which makes this an simple test.</para><para>ASCII chart: <ulink url="http://www.asciitable.com/index/asciifull.gif">http://www.asciitable.com/index/asciifull.gif</ulink>.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsAlphabetic(&apos;E&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>A single character to test if it&apos;s either a-z or A-Z.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is between ranges a-z or A-Z; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="142" column="1" bodyfile="Ace.cpp" bodystart="4441" bodyend="4459"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a658aece7e64b90e57ac08f8b79b8ed0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsAlphabetic</definition>
        <argsstring>(wchar_t character)</argsstring>
        <name>IsAlphabetic</name>
        <param>
          <type>wchar_t</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a wide character is not a digit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsAlphabetic(L&apos;E&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>A single wide character to test.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is not a digit. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="143" column="1" bodyfile="Ace.cpp" bodystart="4484" bodyend="4488"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab5bdc2fab29cf22bd6c06e62a5eab593" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsDigit</definition>
        <argsstring>(char character)</argsstring>
        <name>IsDigit</name>
        <param>
          <type>char</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a character is a digit from 0-9. </para>        </briefdescription>
        <detaileddescription>
<para>Digits fall into a range on the ASCII chart which makes this an simple test.</para><para>ASCII chart: <ulink url="http://www.asciitable.com/index/asciifull.gif">http://www.asciitable.com/index/asciifull.gif</ulink>.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsDigit(&apos;7&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>A single character to test if it&apos;s between 0-9.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is between 0-9; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="144" column="1" bodyfile="Ace.cpp" bodystart="4516" bodyend="4530"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2e41b7c6ba214c7088e723a9027cf197" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsDigit</definition>
        <argsstring>(wchar_t character)</argsstring>
        <name>IsDigit</name>
        <param>
          <type>wchar_t</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a wide character is a digit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsDigit(L&apos;7&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>A single wide character to test if it&apos;s between 0-9.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the wide character is a digit; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="145" column="1" bodyfile="Ace.cpp" bodystart="4555" bodyend="4558"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2f5cb4c89dff665ea2c0e1fd16fefd90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsEmpty</definition>
        <argsstring>(char *str)</argsstring>
        <name>IsEmpty</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Searches a given string to see if it is all empty. </para>        </briefdescription>
        <detaileddescription>
<para>In other words, is the string provided all whitespace.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsEmpty(&quot;<sp/><sp/><sp/><sp/>&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if every character in str is whitespace; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="146" column="1" bodyfile="Ace.cpp" bodystart="4584" bodyend="4599"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abdfef27ea8065e456ad40cc31df5d66a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsEmpty</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>IsEmpty</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Searches a given wide string to see if it is all empty. </para>        </briefdescription>
        <detaileddescription>
<para>In other words, is the string provided all whitespace.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsEmpty(L&quot;<sp/><sp/><sp/><sp/>&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if every wide character in str is whitespace; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="147" column="1" bodyfile="Ace.cpp" bodystart="4625" bodyend="4640"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abf209e3f71042eefd2091b990f0fc6f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsNumber</definition>
        <argsstring>(char *str)</argsstring>
        <name>IsNumber</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns true if all characters are a digit. </para>        </briefdescription>
        <detaileddescription>
<para>ASCII chart: <ulink url="http://www.asciitable.com/index/asciifull.gif">http://www.asciitable.com/index/asciifull.gif</ulink>.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsNumber(&quot;01234&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>A string to test if all characters are digits.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the string is all digits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="148" column="1" bodyfile="Ace.cpp" bodystart="4666" bodyend="4688"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a78e3339b16bfe5d33d54e8a1f8961016" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsNumber</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>IsNumber</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns true if all characters are a digit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsNumber(L&quot;01234&quot;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string to test if all characters are digits.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the wide string is all digits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="149" column="1" bodyfile="Ace.cpp" bodystart="4712" bodyend="4734"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a14d72992e536c2a370f5c779cc3b1f5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsPathADevice</definition>
        <argsstring>(const char *path)</argsstring>
        <name>IsPathADevice</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns true if the provided path leads to a device rather than a file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/14/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>retVal<sp/>=<sp/>Ace::IsPathADevice(&quot;C:\\dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(retVal<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output: false</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The file path to test.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the path leads to a device, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="150" column="1" bodyfile="Ace.cpp" bodystart="4761" bodyend="4794"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2428e78c087c5582b690452ff0ace6e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsPathADevice</definition>
        <argsstring>(const wchar_t *path)</argsstring>
        <name>IsPathADevice</name>
        <param>
          <type>const wchar_t *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns true if the provided path leads to a device rather than a file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/14/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">bool<sp/>retVal<sp/>=<sp/>Ace::IsPathADevice(L&quot;C:\\dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(retVal<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output: false</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The file path to test.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the path leads to a device, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="151" column="1" bodyfile="Ace.cpp" bodystart="4821" bodyend="4853"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a66a594470f47320362a57ae4a4a556aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsWhitespace</definition>
        <argsstring>(char character)</argsstring>
        <name>IsWhitespace</name>
        <param>
          <type>char</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a character is whitespace. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsWhitespace(&apos;<sp/>&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%s&quot;,<sp/>&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to test to see if it is whitespace.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is a space, tab or newline; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="152" column="1" bodyfile="Ace.cpp" bodystart="4878" bodyend="4881"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7923870bcd0a10fedf5d809421eabcd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ace::IsWhitespace</definition>
        <argsstring>(wchar_t character)</argsstring>
        <name>IsWhitespace</name>
        <param>
          <type>wchar_t</type>
          <declname>character</declname>
        </param>
        <briefdescription>
<para>Returns true if a wide character is whitespace. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(Ace::IsWhitespace(L&apos;<sp/>&apos;)<sp/>==<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;true&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;%S&quot;,<sp/>L&quot;false&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:true</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">character</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to test to see if it is whitespace.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the wide character is a space, tab or newline; false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="153" column="1" bodyfile="Ace.cpp" bodystart="4906" bodyend="4909"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8eae4684d32fec1d237da49b0ad57da9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Largest</definition>
        <argsstring>(double num1, double num2)</argsstring>
        <name>Largest</name>
        <param>
          <type>double</type>
          <declname>num1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>num2</declname>
        </param>
        <briefdescription>
<para>Returns the larger of the two values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Largest(2.0,<sp/>2.01);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.010000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>number to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>other number to compare against.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The larger of the two values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="154" column="1" bodyfile="Ace.cpp" bodystart="4929" bodyend="4932"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a02b6e67c430dd5750862a6ed3356c8ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Largest</definition>
        <argsstring>(float num1, float num2)</argsstring>
        <name>Largest</name>
        <param>
          <type>float</type>
          <declname>num1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>num2</declname>
        </param>
        <briefdescription>
<para>Returns the larger of the two values. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Largest(2.0f,<sp/>2.01f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.010000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>number to compare against. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>other number to compare against.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The larger of the two values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="155" column="1" bodyfile="Ace.cpp" bodystart="4952" bodyend="4955"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae0d85e7e3e82f46a0227b85f7112458c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Ace::LastChar</definition>
        <argsstring>(char *str)</argsstring>
        <name>LastChar</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the last character in str. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>temp<sp/>=<sp/>Ace::LastChar(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last character in str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="156" column="1" bodyfile="Ace.cpp" bodystart="4975" bodyend="4983"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad265da6c7c28b05d19489da9398302aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t</type>
        <definition>wchar_t Ace::LastChar</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>LastChar</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the last character in str. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t<sp/>temp<sp/>=<sp/>Ace::LastChar(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%c&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last character in str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="157" column="1" bodyfile="Ace.cpp" bodystart="5003" bodyend="5011"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1acf5ed5e07611ea7cc31b21d808b20e4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::LastIndexOf</definition>
        <argsstring>(char *strToSearch, char *strToLookFor)</argsstring>
        <name>LastIndexOf</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the last occurrence of strToLookFor and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>temp<sp/>=<sp/>Ace::LastIndexOf(data,<sp/>&quot;th&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:55</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search starting from right to left. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="158" column="1" bodyfile="Ace.cpp" bodystart="5033" bodyend="5068"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae0a414c4d05e32a3a1a93fdd9e2faf64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::LastIndexOf</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor)</argsstring>
        <name>LastIndexOf</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <briefdescription>
<para>Searches strToSearch for the last occurrence of strToLookFor and returns the (0 based) index of its location. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>temp<sp/>=<sp/>Ace::LastIndexOf(data,<sp/>L&quot;th&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>temp);</highlight></codeline>
</programlisting> Output:55</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search starting from right to left. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for inside of strToSearch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The (0 based) index of where strToLookFor is located. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="159" column="1" bodyfile="Ace.cpp" bodystart="5090" bodyend="5125"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a278ffeb56149bc1cc75617d639b63468" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::LogBaseTen</definition>
        <argsstring>(double num)</argsstring>
        <name>LogBaseTen</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the logarithm (log) base 10 of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::LogBaseTen(69.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 1.838849</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its logarithm base 10.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The logarithm base 10 of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="160" column="1" bodyfile="Ace.cpp" bodystart="5146" bodyend="5176"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae49751bb233954e6d17505e1089d9f0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::LogBaseTen</definition>
        <argsstring>(float num)</argsstring>
        <name>LogBaseTen</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the logarithm (log) base 10 of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::LogBaseTen(69.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 1.838849</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its logarithm base 10.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The logarithm base 10 of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="161" column="1" bodyfile="Ace.cpp" bodystart="5197" bodyend="5227"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af2bfc128e37911cda7a8af0b9a3a06b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::LogBaseTwo</definition>
        <argsstring>(double num)</argsstring>
        <name>LogBaseTwo</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the logarithm (log) base 2 of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::LogBaseTwo(69.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 6.108524</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its logarithm base 2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The logarithm base 2 of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="162" column="1" bodyfile="Ace.cpp" bodystart="5248" bodyend="5278"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a6a2fa76e6de2cc82a2eb64bd07053f68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::LogBaseTwo</definition>
        <argsstring>(float num)</argsstring>
        <name>LogBaseTwo</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the logarithm (log) base 2 of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::LogBaseTwo(69.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 6.108524</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its logarithm base 2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The logarithm base 2 of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="163" column="1" bodyfile="Ace.cpp" bodystart="5299" bodyend="5329"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a6529499a01bc16109f19ebcb719019f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Mod</definition>
        <argsstring>(double numerator, double denominator)</argsstring>
        <name>Mod</name>
        <param>
          <type>double</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>double</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
<para>Computes the floating-point remainder of the division operation numerator/denominator in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::Mod(9.0,<sp/>5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The remainder of the division operation. If a mathematical error occurs or if denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="164" column="1" bodyfile="Ace.cpp" bodystart="5353" bodyend="5382"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac623f8d6f81e2b1725ca7039815a94c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Mod</definition>
        <argsstring>(float numerator, float denominator)</argsstring>
        <name>Mod</name>
        <param>
          <type>float</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
<para>Computes the floating-point remainder of the division operation numerator/denominator in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::Mod(9.0f,<sp/>5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The remainder of the division operation. If a mathematical error occurs or if denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="165" column="1" bodyfile="Ace.cpp" bodystart="5406" bodyend="5435"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9521670cd2b0a4f90f58ee430e26a44c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::MultiplyThenAdd</definition>
        <argsstring>(double multOne, double multTwo, double add)</argsstring>
        <name>MultiplyThenAdd</name>
        <param>
          <type>double</type>
          <declname>multOne</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multTwo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Calculates the product of multOne * multTwo, then adds add to that product (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>(multOne * multTwo) + add). Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::MultiplyThenAdd(9.0,<sp/>3.0,<sp/>15.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 42.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multOne</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to add to the product of multOne * multTwo.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of (multOne * multTwo) + add. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="166" column="1" bodyfile="Ace.cpp" bodystart="5459" bodyend="5486"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a934487848d6a37fef098f48d77473849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::MultiplyThenAdd</definition>
        <argsstring>(float multOne, float multTwo, float add)</argsstring>
        <name>MultiplyThenAdd</name>
        <param>
          <type>float</type>
          <declname>multOne</declname>
        </param>
        <param>
          <type>float</type>
          <declname>multTwo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Calculates the product of multOne * multTwo, then adds add to that product (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>(multOne * multTwo) + add). Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::MultiplyThenAdd(9.0f,<sp/>3.0f,<sp/>15.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 42.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>multOne</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to add to the product of multOne * multTwo.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of (multOne * multTwo) + add. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="167" column="1" bodyfile="Ace.cpp" bodystart="5510" bodyend="5537"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a69ddb0ab24047c5175b3dc4fb3e8f3c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::NaturalLog</definition>
        <argsstring>(double num)</argsstring>
        <name>NaturalLog</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Natural Logarithm (ln) of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::NaturalLog(69.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 4.234107</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its Natural Logarithm.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Natural Logarithm of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="168" column="1" bodyfile="Ace.cpp" bodystart="5558" bodyend="5588"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae5ac7b240b43c5af775695af889c1734" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::NaturalLog</definition>
        <argsstring>(float num)</argsstring>
        <name>NaturalLog</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the Natural Logarithm (ln) of num in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::NaturalLog(69.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 4.234107</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its Natural Logarithm.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Natural Logarithm of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="169" column="1" bodyfile="Ace.cpp" bodystart="5609" bodyend="5639"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a2a3aa781cdf81480b5e1ce5075649ed4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::NaturalLogGammaFunction</definition>
        <argsstring>(double num)</argsstring>
        <name>NaturalLogGammaFunction</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates The Natural Log (ln) of The Gamma Function (ln | (0)integral(Inf)[t^num-1 * e^-t dt] |). </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::NaturalLogGammaFunction(5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 3.178054</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for t^num-1 in the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of calculating The Gamma Function for t^num-1. If a mathematical error occurs or if num is less than or equal to 0.0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="170" column="1" bodyfile="Ace.cpp" bodystart="5662" bodyend="5692"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a698a0b446107e5226c61faa3f3922277" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::NaturalLogGammaFunction</definition>
        <argsstring>(float num)</argsstring>
        <name>NaturalLogGammaFunction</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates The Natural Log (ln) of The Gamma Function (ln | (0)integral(Inf)[t^num-1 * e^-t dt] |). </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::NaturalLogGammaFunction(5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 3.178054</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for t^num-1 in the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of calculating The Gamma Function for t^num-1. If a mathematical error occurs or if num is less than or equal to 0.0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="171" column="1" bodyfile="Ace.cpp" bodystart="5715" bodyend="5744"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a12241a4abf6a86ad707789cbe9979dd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::NextIndexOf</definition>
        <argsstring>(char *strToSearch, char charToLookFor, int startIndex)</argsstring>
        <name>NextIndexOf</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char</type>
          <declname>charToLookFor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Retrieves the first occurrence of charToLookFor in strToSearch starting at startIndex onward. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>retVal<sp/>=<sp/>Ace::NextIndexOf(&quot;I<sp/>wish<sp/>I<sp/>blew<sp/>it<sp/>up<sp/>instead...wicked.&quot;,<sp/>&apos;I&apos;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 7</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to look for in strToSearch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to start looking.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the first occurrence of charToLookFor starting from startIndex. If not found, -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="172" column="1" bodyfile="Ace.cpp" bodystart="5767" bodyend="5781"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aeb1c9d5abc5fca76246008bada3bc55d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::NextIndexOf</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t charToLookFor, int startIndex)</argsstring>
        <name>NextIndexOf</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>charToLookFor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Retrieves the first occurrence of charToLookFor in strToSearch starting at startIndex onward. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>retVal<sp/>=<sp/>Ace::NextIndexOf(L&quot;I<sp/>wish<sp/>I<sp/>blew<sp/>it<sp/>up<sp/>instead...wicked.&quot;,<sp/>L&apos;I&apos;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 7</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide Character to look for in strToSearch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to start looking.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the first occurrence of charToLookFor starting from startIndex. If not found, -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="173" column="1" bodyfile="Ace.cpp" bodystart="5804" bodyend="5818"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aeb3c690712a0eb95f5dd60ebb6ea0120" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::NextIndexOf</definition>
        <argsstring>(char *strToSearch, char *strToLookFor, int startIndex)</argsstring>
        <name>NextIndexOf</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Retrieves the first occurrence of strToLookFor in strToSearch starting at startIndex onward. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>retVal<sp/>=<sp/>Ace::NextIndexOf(&quot;I<sp/>wish<sp/>I<sp/>blew<sp/>it<sp/>up<sp/>instead...wicked.&quot;,<sp/>&quot;I<sp/>&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 7</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>String to search through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>String to look for in strToSearch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to start looking.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the first occurrence of strToLookFor starting from startIndex. If not found, -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="174" column="1" bodyfile="Ace.cpp" bodystart="5841" bodyend="5879"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0af0979cd0675ebeff6ff99621593f3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ace::NextIndexOf</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor, int startIndex)</argsstring>
        <name>NextIndexOf</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
<para>Retrieves the first occurrence of strToLookFor in strToSearch starting at startIndex onward. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/10/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>retVal<sp/>=<sp/>Ace::NextIndexOf(L&quot;I<sp/>wish<sp/>I<sp/>blew<sp/>it<sp/>up<sp/>instead...wicked.&quot;,<sp/>L&quot;I<sp/>&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 7</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to search through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>Wide String to look for in strToSearch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to start looking.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the first occurrence of strToLookFor starting from startIndex. If not found, -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="175" column="1" bodyfile="Ace.cpp" bodystart="5902" bodyend="5940"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9beab58661041127b9073ec5ff8a275a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::NumTimesTwoToTheXPower</definition>
        <argsstring>(double num, double power)</argsstring>
        <name>NumTimesTwoToTheXPower</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates num * 2^power in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::NumTimesTwoToTheXPower(1.0/3.0,<sp/>5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 10.666667</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to multiply 2^power by. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise 2 to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of num * 2^power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="176" column="1" bodyfile="Ace.cpp" bodystart="5961" bodyend="5988"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a432c3d7cf654920eb21e72f0711db3d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::NumTimesTwoToTheXPower</definition>
        <argsstring>(float num, float power)</argsstring>
        <name>NumTimesTwoToTheXPower</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <param>
          <type>float</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates num * 2^power in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::NumTimesTwoToTheXPower(1.0f/3.0f,<sp/>5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 10.666667</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to multiply 2^power by. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise 2 to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of num * 2^power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="177" column="1" bodyfile="Ace.cpp" bodystart="6009" bodyend="6036"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1adbcb9f24f9c412d29d7b671a3aa16c42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Power</definition>
        <argsstring>(double base, double exponent)</argsstring>
        <name>Power</name>
        <param>
          <type>double</type>
          <declname>base</declname>
        </param>
        <param>
          <type>double</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Takes the provided base and raises it to the exponent (power). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/29/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>powResult<sp/>=<sp/>Ace::Power(2.0,<sp/>5.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>powResult);</highlight></codeline>
</programlisting> Output: 32.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of times to multiply base by itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base raised to the exponent is returned. If a mathematical error occurs or base is 0.0 and exponent is less than or equal to 0.0 OR base is negative, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="178" column="1" bodyfile="Ace.cpp" bodystart="6159" bodyend="6194"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abd44bbcb8b34e13bf23013af2522839d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Power</definition>
        <argsstring>(float base, float exponent)</argsstring>
        <name>Power</name>
        <param>
          <type>float</type>
          <declname>base</declname>
        </param>
        <param>
          <type>float</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Takes the provided base and raises it to the exponent (power). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>powResult<sp/>=<sp/>Ace::Power(2.0f,<sp/>5.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>powResult);</highlight></codeline>
</programlisting> Output: 32.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of times to multiply base by itself.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base raised to the exponent is returned. If a mathematical error occurs or base is 0.0 and exponent is less than or equal to 0.0 OR base is negative, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="179" column="1" bodyfile="Ace.cpp" bodystart="6217" bodyend="6252"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5a64e64344fe2e67ba61a945d29ac95a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::PositiveDifference</definition>
        <argsstring>(double numOne, double numTwo)</argsstring>
        <name>PositiveDifference</name>
        <param>
          <type>double</type>
          <declname>numOne</declname>
        </param>
        <param>
          <type>double</type>
          <declname>numTwo</declname>
        </param>
        <briefdescription>
<para>Calculates the difference between numOne and numTwo only if numOne &gt; numTwo. </para>        </briefdescription>
        <detaileddescription>
<para>If numOne &lt;= numTwo then 0 is returned. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::PositiveDifference(6.3,<sp/>2.7);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 3.600000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numOne</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for subtraction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to use for subtraction.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If numOne is larger then numTwo; then numOne - numTwo is returned, else 0 is returned. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="180" column="1" bodyfile="Ace.cpp" bodystart="6060" bodyend="6086"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a94ec5e1a6548f4dc778e26c4049dc6e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::PositiveDifference</definition>
        <argsstring>(float numOne, float numTwo)</argsstring>
        <name>PositiveDifference</name>
        <param>
          <type>float</type>
          <declname>numOne</declname>
        </param>
        <param>
          <type>float</type>
          <declname>numTwo</declname>
        </param>
        <briefdescription>
<para>Calculates the difference between numOne and numTwo only if numOne &gt; numTwo. </para>        </briefdescription>
        <detaileddescription>
<para>If numOne &lt;= numTwo then 0 is returned. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::PositiveDifference(6.3f,<sp/>2.7f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 3.600000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numOne</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use for subtraction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numTwo</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to use for subtraction.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If numOne is larger then numTwo; then numOne - numTwo is returned, else 0 is returned. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="181" column="1" bodyfile="Ace.cpp" bodystart="6110" bodyend="6136"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4acd795a7bf9c65be8e4c4f5d5647ba0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::RadiansToDegrees</definition>
        <argsstring>(double radians)</argsstring>
        <name>RadiansToDegrees</name>
        <param>
          <type>double</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Converts a number from radians to degrees. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/16/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>rad<sp/>=<sp/>1.570796;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>deg<sp/>=<sp/>Ace::RadiansToDegrees(rad);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>deg);</highlight></codeline>
</programlisting> Output:89.999981</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">radians</parametername>
</parameternamelist>
<parameterdescription>
<para>Radians to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Degrees. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="182" column="1" bodyfile="Ace.cpp" bodystart="6272" bodyend="6275"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a38a090d5bd7b5b5cff8650f259ee35ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::RadiansToDegrees</definition>
        <argsstring>(float radians)</argsstring>
        <name>RadiansToDegrees</name>
        <param>
          <type>float</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Converts a number from radians to degrees. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/16/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>rad<sp/>=<sp/>1.570796f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>deg<sp/>=<sp/>Ace::RadiansToDegrees(rad);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>deg);</highlight></codeline>
</programlisting> Output:89.999981</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">radians</parametername>
</parameternamelist>
<parameterdescription>
<para>Radians to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Degrees. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="183" column="1" bodyfile="Ace.cpp" bodystart="6295" bodyend="6298"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0f05443f499ce94d53c3a5e584460d52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Remainder</definition>
        <argsstring>(double numerator, double denominator)</argsstring>
        <name>Remainder</name>
        <param>
          <type>double</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>double</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
<para>Calculates the Computes The IEEE remainder of the floating point division operation numerator/denominator. </para>        </briefdescription>
        <detaileddescription>
<para>In contrast to <ref refid="class_ace_1a6529499a01bc16109f19ebcb719019f7" kindref="member">Mod()</ref>; the returned value is not guaranteed to have the same sign as the numerator. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::Remainder(-5.1,<sp/>3.2);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.300000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The IEEE remainder of the floating point division. If a mathematical error occurs or denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="184" column="1" bodyfile="Ace.cpp" bodystart="6323" bodyend="6352"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af4dcc33bb8d85f3b654edbcb0912f88b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Remainder</definition>
        <argsstring>(float numerator, float denominator)</argsstring>
        <name>Remainder</name>
        <param>
          <type>float</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
<para>Calculates the Computes The IEEE remainder of the floating point division operation numerator/denominator. </para>        </briefdescription>
        <detaileddescription>
<para>In contrast to <ref refid="class_ace_1a6529499a01bc16109f19ebcb719019f7" kindref="member">Mod()</ref>; the returned value is not guaranteed to have the same sign as the numerator. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::Remainder(-5.1f,<sp/>3.2f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 1.300000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The IEEE remainder of the floating point division. If a mathematical error occurs or denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="185" column="1" bodyfile="Ace.cpp" bodystart="6377" bodyend="6406"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a83c9c251b60c0becf2ff3b5f6fc3f0ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::RemainderWithQuadrant</definition>
        <argsstring>(double numerator, double denominator, int *outQuadrant)</argsstring>
        <name>RemainderWithQuadrant</name>
        <param>
          <type>double</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>double</type>
          <declname>denominator</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outQuadrant</declname>
        </param>
        <briefdescription>
<para>Calculates the floating-point remainder of the division operation numerator/denominator the same way the <ref refid="class_ace_1a0f05443f499ce94d53c3a5e584460d52" kindref="member">Remainder()</ref> function does. </para>        </briefdescription>
        <detaileddescription>
<para>Additionally, the sign and at least the three of the last bits of numerator/denominator will be stored in outQuadrant, sufficient to determine the quadrant of the result within a period. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>quadrant;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::RemainderWithQuadrant(-5.1,<sp/>3.2,<sp/>&amp;quadrant);</highlight></codeline>
<codeline><highlight class="normal">quadrant<sp/>=<sp/>(unsigned<sp/>int)quadrant<sp/>%<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f<sp/>Quadrant:%d\n&quot;,<sp/>result,<sp/>quadrant);</highlight></codeline>
</programlisting> Output: 1.300000 Quadrant:2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outQuadrant</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign to indicate the quadrant.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The IEEE remainder of the floating point division and the quadrant data. If a mathematical error occurs or denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="186" column="1" bodyfile="Ace.cpp" bodystart="6436" bodyend="6465"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9aeabf43c45659c6024a4dce1ae2a1cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::RemainderWithQuadrant</definition>
        <argsstring>(float numerator, float denominator, int *outQuadrant)</argsstring>
        <name>RemainderWithQuadrant</name>
        <param>
          <type>float</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>float</type>
          <declname>denominator</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outQuadrant</declname>
        </param>
        <briefdescription>
<para>Calculates the floating-point remainder of the division operation numerator/denominator the same way the <ref refid="class_ace_1a0f05443f499ce94d53c3a5e584460d52" kindref="member">Remainder()</ref> function does. </para>        </briefdescription>
        <detaileddescription>
<para>Additionally, the sign and at least the three of the last bits of numerator/denominator will be stored in outQuadrant, sufficient to determine the quadrant of the result within a period. Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>quadrant;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::RemainderWithQuadrant(-5.1f,<sp/>3.2f,<sp/>&amp;quadrant);</highlight></codeline>
<codeline><highlight class="normal">quadrant<sp/>=<sp/>(unsigned<sp/>int)quadrant<sp/>%<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f<sp/>Quadrant:%d\n&quot;,<sp/>result,<sp/>quadrant);</highlight></codeline>
</programlisting> Output: 1.300000 Quadrant:2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numerator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be divided. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to divide the numerator by. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outQuadrant</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign to indicate the quadrant.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The IEEE remainder of the floating point division and the quadrant data. If a mathematical error occurs or denominator equals 0, then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="187" column="1" bodyfile="Ace.cpp" bodystart="6495" bodyend="6524"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae41b2d2f89451e9659550845170d328a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::RemoveAllWhitespace</definition>
        <argsstring>(char *str)</argsstring>
        <name>RemoveAllWhitespace</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Removes all whitespace from a given string. </para>        </briefdescription>
        <detaileddescription>
<para>A newly allocated string is returned that has all whitespace removed from it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>temp<sp/>=<sp/>Ace::RemoveAllWhitespace(&quot;E<sp/>dd\t<sp/>i<sp/><sp/>e<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(temp);</highlight></codeline>
</programlisting> Output:Eddie</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to remove whitespace from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing no whitespace. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="188" column="1" bodyfile="Ace.cpp" bodystart="6545" bodyend="6556"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a869247b2abaeca31aff7e12d030e0872" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::RemoveAllWhitespace</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>RemoveAllWhitespace</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Removes all whitespace from a given wide string. </para>        </briefdescription>
        <detaileddescription>
<para>A newly allocated string is returned that has all whitespace removed from it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>temp<sp/>=<sp/>Ace::RemoveAllWhitespace(L&quot;E<sp/>dd\t<sp/>i<sp/><sp/>e<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(temp);</highlight></codeline>
</programlisting> Output:Eddie</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to remove whitespace from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing no whitespace. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="189" column="1" bodyfile="Ace.cpp" bodystart="6577" bodyend="6588"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a916dc3ddc85c0c5ad3840dfab4962f9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::RemoveAllWhitespaceInPlace</definition>
        <argsstring>(char *str)</argsstring>
        <name>RemoveAllWhitespaceInPlace</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Removes all whitespace from a given string in place. </para>        </briefdescription>
        <detaileddescription>
<para>This means That str is modified directly and as a result, no return value is needed. Assumes str is an allocated string and not a string literal.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>temp<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;E<sp/>dd\t<sp/>i<sp/><sp/>e<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::RemoveAllWhitespaceInPlace(temp);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(temp);</highlight></codeline>
</programlisting> Output:Eddie</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to directly modify and delete whitespace from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="190" column="1" bodyfile="Ace.cpp" bodystart="6609" bodyend="6630"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aef98302ca6ffca2bf6ed13fd0f887a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::RemoveAllWhitespaceInPlace</definition>
        <argsstring>(wchar_t *str)</argsstring>
        <name>RemoveAllWhitespaceInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Removes all whitespace from a given wide string in place. </para>        </briefdescription>
        <detaileddescription>
<para>This means That str is modified directly and as a result, no return value is needed. Assumes str is an allocated string and not a string literal.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>temp<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;E<sp/>dd\t<sp/>i<sp/><sp/>e<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::RemoveAllWhitespaceInPlace(temp);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(temp);</highlight></codeline>
</programlisting> Output:Eddie</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to directly modify and delete whitespace from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="191" column="1" bodyfile="Ace.cpp" bodystart="6651" bodyend="6672"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac4f88cf4ac3842c748ed4222bf885660" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::RemoveCharactersFromString</definition>
        <argsstring>(char *strToRemoveFrom, char charToRemove)</argsstring>
        <name>RemoveCharactersFromString</name>
        <param>
          <type>char *</type>
          <declname>strToRemoveFrom</declname>
        </param>
        <param>
          <type>char</type>
          <declname>charToRemove</declname>
        </param>
        <briefdescription>
<para>Removes any occurrence of charToRemove from strToRemoveFrom. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/12/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>removedCharData<sp/>=<sp/>Ace::RemoveCharactersFromString(data,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>removedCharData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(removedCharData);</highlight></codeline>
</programlisting> Output:Hs nyone ever been s fr s decided to be there nd then look more like?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToRemoveFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, to remove from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string with every occurrence of charToRemove removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="192" column="1" bodyfile="Ace.cpp" bodystart="6694" bodyend="6705"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a517caf5b3abb9d9480f654afa2e9c121" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::RemoveCharactersFromString</definition>
        <argsstring>(wchar_t *strToRemoveFrom, wchar_t charToRemove)</argsstring>
        <name>RemoveCharactersFromString</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToRemoveFrom</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>charToRemove</declname>
        </param>
        <briefdescription>
<para>Removes any occurrence of charToRemove from strToRemoveFrom. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>removedCharData<sp/>=<sp/>Ace::RemoveCharactersFromString(data,<sp/>L&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>removedCharData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(removedCharData);</highlight></codeline>
</programlisting> Output:Hs nyone ever been s fr s decided to be there nd then look more like?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToRemoveFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, to remove from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string with every occurrence of charToRemove removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="193" column="1" bodyfile="Ace.cpp" bodystart="6727" bodyend="6738"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7a4f21e66792a5813fc50775ae75091c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::RemoveCharactersFromStringInPlace</definition>
        <argsstring>(char *strToRemoveFrom, char charToRemove)</argsstring>
        <name>RemoveCharactersFromStringInPlace</name>
        <param>
          <type>char *</type>
          <declname>strToRemoveFrom</declname>
        </param>
        <param>
          <type>char</type>
          <declname>charToRemove</declname>
        </param>
        <briefdescription>
<para>Removes any occurrence of charToRemove from strToRemoveFrom. </para>        </briefdescription>
        <detaileddescription>
<para>strToRemoveFrom must be an allocated string since this function works directly on it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/12/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>removedCharData<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::RemoveCharactersFromStringInPlace(removedCharData,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s&quot;,<sp/>removedCharData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(removedCharData);</highlight></codeline>
</programlisting> Output:Hs nyone ever been s fr s decided to be there nd then look more like?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToRemoveFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, to remove from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="194" column="1" bodyfile="Ace.cpp" bodystart="6760" bodyend="6785"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8b4630bd6fd620f1f9724a100f28acad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::RemoveCharactersFromStringInPlace</definition>
        <argsstring>(wchar_t *strToRemoveFrom, wchar_t charToRemove)</argsstring>
        <name>RemoveCharactersFromStringInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToRemoveFrom</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>charToRemove</declname>
        </param>
        <briefdescription>
<para>Removes any occurrence of charToRemove from strToRemoveFrom. </para>        </briefdescription>
        <detaileddescription>
<para>strToRemoveFrom must be an allocated string since this function works directly on it.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>removedCharData<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;Has<sp/>anyone<sp/>ever<sp/>been<sp/>as<sp/>far<sp/>as<sp/>decided<sp/>to<sp/>be<sp/>there<sp/>and<sp/>then<sp/>look<sp/>more<sp/>like?&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::RemoveCharactersFromStringInPlace(removedCharData,<sp/>L&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>removedCharData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(removedCharData);</highlight></codeline>
</programlisting> Output:Hs nyone ever been s fr s decided to be there nd then look more like?</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToRemoveFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-null, to remove from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="195" column="1" bodyfile="Ace.cpp" bodystart="6807" bodyend="6832"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aefcffafee15c9948c5bb0bac1173f770" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ReplaceString</definition>
        <argsstring>(char *strToSearch, char *strToLookFor, char *strToReplaceWith)</argsstring>
        <name>ReplaceString</name>
        <param>
          <type>char *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToReplaceWith</declname>
        </param>
        <briefdescription>
<para>Inserts strToReplaceWith in the position strToLookFor is located, then strToLookFor is removed. </para>        </briefdescription>
        <detaileddescription>
<para>A newly allocated string is then returned.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::ReplaceString(&quot;Eddie<sp/>is<sp/>cool.&quot;,<sp/>&quot;is&quot;,<sp/>&quot;is<sp/>not&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:Eddie is not cool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to look through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToReplaceWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to replace with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string with the change. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="196" column="1" bodyfile="Ace.cpp" bodystart="6855" bodyend="6866"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a1dd586fdf352bde19e0d3c2e72eecac8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ReplaceString</definition>
        <argsstring>(wchar_t *strToSearch, wchar_t *strToLookFor, wchar_t *strToReplaceWith)</argsstring>
        <name>ReplaceString</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToReplaceWith</declname>
        </param>
        <briefdescription>
<para>Inserts strToReplaceWith in the position strToLookFor is located, then strToLookFor is removed. </para>        </briefdescription>
        <detaileddescription>
<para>A newly allocated wide string is then returned.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::ReplaceString(L&quot;Eddie<sp/>is<sp/>cool.&quot;,<sp/>L&quot;is&quot;,<sp/>L&quot;is<sp/>not&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:Eddie is not cool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to look through. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToReplaceWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to replace with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created wide string with the change. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="197" column="1" bodyfile="Ace.cpp" bodystart="6889" bodyend="6900"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a4f524383b4ee4eadd4263824ed189790" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ReplaceStringInPlace</definition>
        <argsstring>(char *&amp;strToSearch, char *strToLookFor, char *strToReplaceWith)</argsstring>
        <name>ReplaceStringInPlace</name>
        <param>
          <type>char *&amp;</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strToReplaceWith</declname>
        </param>
        <briefdescription>
<para>Directly modifies and inserts strToReplaceWith in the position strToLookFor is located, then strToLookFor is removed. </para>        </briefdescription>
        <detaileddescription>
<para>Since strToSearch is modified directly, there is no return value. data is re-allocated in order to hold the replacement string.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;Eddie<sp/>is<sp/>cool.&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ReplaceStringInPlace(data,<sp/>&quot;is&quot;,<sp/>&quot;is<sp/>not&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:Eddie is not cool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to directly parse and modify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToReplaceWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to replace with. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="198" column="1" bodyfile="Ace.cpp" bodystart="6924" bodyend="6975"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8445bd902361e3c05edf04cce65949fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ReplaceStringInPlace</definition>
        <argsstring>(wchar_t *&amp;strToSearch, wchar_t *strToLookFor, wchar_t *strToReplaceWith)</argsstring>
        <name>ReplaceStringInPlace</name>
        <param>
          <type>wchar_t *&amp;</type>
          <declname>strToSearch</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToLookFor</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>strToReplaceWith</declname>
        </param>
        <briefdescription>
<para>Directly modifies and inserts strToReplaceWith in the position strToLookFor is located, then strToLookFor is removed. </para>        </briefdescription>
        <detaileddescription>
<para>Since strToSearch is modified directly, there is no return value. data is re-allocated in order to hold the replacement wide string.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;Eddie<sp/>is<sp/>cool.&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ReplaceStringInPlace(data,<sp/>L&quot;is&quot;,<sp/>L&quot;is<sp/>not&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:Eddie is not cool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToSearch</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to directly parse and modify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToLookFor</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strToReplaceWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to replace with. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="199" column="1" bodyfile="Ace.cpp" bodystart="6999" bodyend="7050"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a15c42f6a53a7eaaf7a33b62d0cf3d015" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::RetrieveDataBetweenTags</definition>
        <argsstring>(char *fileData, char *startTag, char *endTag)</argsstring>
        <name>RetrieveDataBetweenTags</name>
        <param>
          <type>char *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>startTag</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>endTag</declname>
        </param>
        <briefdescription>
<para>Finds the XML data between the startTag and endTag and returns it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(C:\\Config.xml,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataBetweenTags(data,<sp/>&quot;&lt;position&gt;&quot;,<sp/>&quot;&lt;/position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data<sp/>between<sp/>tags:%s\n&quot;,<sp/>tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:0.1, 2.3, 2.2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to start from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to end on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Buffer containing the data between startTag + startTag.length() and endTag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="200" column="1" bodyfile="Ace.cpp" bodystart="7075" bodyend="7097"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad3a908a447d305f769bd40af461e48e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::RetrieveDataBetweenTags</definition>
        <argsstring>(wchar_t *fileData, wchar_t *startTag, wchar_t *endTag)</argsstring>
        <name>RetrieveDataBetweenTags</name>
        <param>
          <type>wchar_t *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>startTag</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>endTag</declname>
        </param>
        <briefdescription>
<para>Finds the XML data between the startTag and endTag and returns it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(L&quot;C:\\Config.xml&quot;,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataBetweenTags(data,<sp/>L&quot;&lt;position&gt;&quot;,<sp/>L&quot;&lt;/position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data<sp/>between<sp/>tags:%S\n&quot;,<sp/>tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:0.1, 2.3, 2.2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to start from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to end on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Buffer containing the data between startTag + startTag.length() and endTag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="201" column="1" bodyfile="Ace.cpp" bodystart="7122" bodyend="7144"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac7c2687eabb6302150a0ef33dcc1e6c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::RetrieveDataBetweenTags</definition>
        <argsstring>(char *fileData, int startTagIndex, int endTagIndex)</argsstring>
        <name>RetrieveDataBetweenTags</name>
        <param>
          <type>char *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startTagIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endTagIndex</declname>
        </param>
        <briefdescription>
<para>Finds the XML data between the startTagIndex and endTagIndex and returns it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(vertShaderPath,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>startIndex<sp/>=<sp/>Ace::IndexOf(data,<sp/>&quot;&lt;position&gt;&quot;)<sp/>+<sp/>strlen(&quot;&lt;position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>endIndex<sp/>=<sp/>Ace::IndexOf(data,<sp/>&quot;&lt;/position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataBetweenTags(data,<sp/>startIndex,<sp/>endIndex);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data<sp/>between<sp/>tags:%s\n&quot;,<sp/>tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:0.1, 2.3, 2.2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTagIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of where to start reading in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTagIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of where to end reading data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Buffer containing the data between startTagIndex and endTagIndex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="202" column="1" bodyfile="Ace.cpp" bodystart="7170" bodyend="7178"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac33be815c3d923b322217d9822471680" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::RetrieveDataBetweenTags</definition>
        <argsstring>(wchar_t *fileData, int startTagIndex, int endTagIndex)</argsstring>
        <name>RetrieveDataBetweenTags</name>
        <param>
          <type>wchar_t *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startTagIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endTagIndex</declname>
        </param>
        <briefdescription>
<para>Finds the XML data between the startTagIndex and endTagIndex and returns it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>filePath<sp/>=<sp/>L&quot;C:\\Config.xml&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(filePath,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>startIndex<sp/>=<sp/>Ace::IndexOf(data,<sp/>L&quot;&lt;position&gt;&quot;)<sp/>+<sp/>wcslen(L&quot;&lt;position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>endIndex<sp/>=<sp/>Ace::IndexOf(data,<sp/>L&quot;&lt;/position&gt;&quot;);</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataBetweenTags(data,<sp/>startIndex,<sp/>endIndex);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;Data<sp/>between<sp/>tags:%S\n&quot;,<sp/>tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:0.1, 2.3, 2.2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTagIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of where to start reading in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTagIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of where to end reading data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Buffer containing the data between startTagIndex and endTagIndex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="203" column="1" bodyfile="Ace.cpp" bodystart="7205" bodyend="7213"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a639fcb40de735847ee36b09ebaf58243" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** Ace::RetrieveDataChunksBetweenTags</definition>
        <argsstring>(char *fileData, char *startTag, char *endTag, int &amp;outFinalBufferSize)</argsstring>
        <name>RetrieveDataChunksBetweenTags</name>
        <param>
          <type>char *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>startTag</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>endTag</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outFinalBufferSize</declname>
        </param>
        <briefdescription>
<para>Finds a series of XML data between startTag and endTag. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if we were reading in an XML file that looked like this: &lt;Models&gt; &lt;Model&gt; &lt;position&gt;0.1, 2.3, 2.2&lt;/position&gt; &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt; &lt;/Model&gt; &lt;Model&gt; &lt;position&gt;3.0, 4.0, 5.0&lt;/position&gt; &lt;rotation&gt;0.0, 30.0, 0.0, 1.0&lt;/rotation&gt; &lt;/Model&gt; &lt;/Models&gt;</para><para>And the start and end tags were &quot;&lt;Model&gt;&quot; and &quot;&lt;/Model&gt;&quot; respectively; then the function will return an array containing: Array[0]=&quot;&lt;position&gt;0.1, 2.3, 2.2&lt;/position&gt;
          &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt;&quot;</para><para>Array[1]=&quot;&lt;position&gt;1.0, 2.0, 0.0&lt;/position&gt;
          &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt;&quot;</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(vertShaderPath,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>tagDataSize<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">char**<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataChunksBetweenTags(data,<sp/>&quot;&lt;Model&gt;&quot;,<sp/>&quot;&lt;/Model&gt;&quot;,<sp/>tagDataSize);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>tagDataSize;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%s\n&quot;,<sp/>currIndex,<sp/>tagData[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(tagData[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:(Displayed Above)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to start from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the tag to end on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outFinalBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the out final buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated string array containing the data between each startTag and endTag found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="204" column="1" bodyfile="Ace.cpp" bodystart="7263" bodyend="7303"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1afc8d972571ec5b22f6a8553ac324fc3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t **</type>
        <definition>wchar_t ** Ace::RetrieveDataChunksBetweenTags</definition>
        <argsstring>(wchar_t *fileData, wchar_t *startTag, wchar_t *endTag, int &amp;outFinalBufferSize)</argsstring>
        <name>RetrieveDataChunksBetweenTags</name>
        <param>
          <type>wchar_t *</type>
          <declname>fileData</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>startTag</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>endTag</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outFinalBufferSize</declname>
        </param>
        <briefdescription>
<para>Finds a series of XML data between startTag and endTag. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if we were reading in an XML file that looked like this: &lt;Models&gt; &lt;Model&gt; &lt;position&gt;0.1, 2.3, 2.2&lt;/position&gt; &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt; &lt;/Model&gt; &lt;Model&gt; &lt;position&gt;3.0, 4.0, 5.0&lt;/position&gt; &lt;rotation&gt;0.0, 30.0, 0.0, 1.0&lt;/rotation&gt; &lt;/Model&gt; &lt;/Models&gt;</para><para>And the start and end tags were &quot;&lt;Model&gt;&quot; and &quot;&lt;/Model&gt;&quot; respectively; then the function will return an array containing: Array[0]=&quot;&lt;position&gt;0.1, 2.3, 2.2&lt;/position&gt;
          &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt;&quot;</para><para>Array[1]=&quot;&lt;position&gt;1.0, 2.0, 0.0&lt;/position&gt;
          &lt;rotation&gt;20.0, 0.0, 0.0, 1.0&lt;/rotation&gt;&quot;</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>filePath<sp/>=<sp/>L&quot;C:\\Config.xml&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::RetrieveFileData(filePath,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>tagDataSize<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">wchar_t**<sp/>tagData<sp/>=<sp/>Ace::RetrieveDataChunksBetweenTags(data,<sp/>L&quot;&lt;Model&gt;&quot;,<sp/>L&quot;&lt;/Model&gt;&quot;,<sp/>tagDataSize);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>tagDataSize;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%S\n&quot;,<sp/>currIndex,<sp/>tagData[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(tagData[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(tagData);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:(Displayed Above)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fileData</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string containing the data to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string representing the tag to start from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">endTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string representing the tag to end on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outFinalBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the out final buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated wide string array containing the data between each startTag and endTag found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="205" column="1" bodyfile="Ace.cpp" bodystart="7354" bodyend="7394"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a66dfff3d59c12f04d7d45841ad8a1e85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ReadTextFile</definition>
        <argsstring>(char *filePath, size_t numBytesToRead=0, size_t maxBufferSize=MAX_STRING_BUFFER_SIZE, const char *mode=&quot;r&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>ReadTextFile</name>
        <param>
          <type>char *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBytesToRead</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxBufferSize</declname>
          <defval><ref refid="_ace_8h_1a3fb0211ecf1dc4bdd8c17c2959ff732c" kindref="member">MAX_STRING_BUFFER_SIZE</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
          <defval>&quot;r&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for reading and returns a char buffer containing some or all of the data in the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/12/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>retVal<sp/>=<sp/>Ace::ReadTextFile(&quot;C:\\dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>retVal);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal);</highlight></codeline>
</programlisting> Output: dicksdicksdicksdicksdicksdicksdick8=&gt;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytesToRead</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (the number bytes read in). If 0; numBytesToRead = maxBufferSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;r&quot; for read, &quot;r+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Either zero, or a value returned by ftell(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="206" column="1" bodyfile="Ace.cpp" bodystart="7422" bodyend="7499"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a66aaa5acfe5830750b2c1d0658ac281b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ReadTextFileW</definition>
        <argsstring>(wchar_t *filePath, size_t numBytesToRead=0, size_t maxBufferSize=MAX_STRING_BUFFER_SIZE, const wchar_t *mode=L&quot;r, ccs=UTF-8&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>ReadTextFileW</name>
        <param>
          <type>wchar_t *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBytesToRead</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxBufferSize</declname>
          <defval><ref refid="_ace_8h_1a3fb0211ecf1dc4bdd8c17c2959ff732c" kindref="member">MAX_STRING_BUFFER_SIZE</ref></defval>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>mode</declname>
          <defval>L&quot;r, ccs=UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for reading and returns a wide char buffer containing some or all of the data in the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">//By<sp/>default,<sp/>read<sp/>mode<sp/>is<sp/>set<sp/>to<sp/>&quot;r,<sp/>ccs=UTF-8&quot;.</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>retVal<sp/>=<sp/>Ace::ReadTextFileW(L&quot;C:\\jap.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">MessageBoxW(NULL,<sp/>retVal,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal);</highlight></codeline>
</programlisting> Output: わたし　わ　エドワド　オ’ハゲン　です。　これ　は　なん　です　か？</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytesToRead</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (the number bytes read in). If 0; numBytesToRead = maxBufferSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;r&quot; for read, &quot;r, ccs=UTF-8&quot; for read unicode, &quot;r+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Either zero, or a value returned by ftell(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="207" column="1" bodyfile="Ace.cpp" bodystart="7528" bodyend="7605"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9700d7264c30af90d9787a82c77170bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ReadBinaryFile</definition>
        <argsstring>(char *filePath, size_t numBytesToRead=0, size_t maxBufferSize=MAX_STRING_BUFFER_SIZE, const char *mode=&quot;rb&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>ReadBinaryFile</name>
        <param>
          <type>char *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBytesToRead</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxBufferSize</declname>
          <defval><ref refid="_ace_8h_1a3fb0211ecf1dc4bdd8c17c2959ff732c" kindref="member">MAX_STRING_BUFFER_SIZE</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
          <defval>&quot;rb&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for reading and returns a char buffer containing some or all of the data in the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>retVal<sp/>=<sp/>Ace::ReadBinaryFile(&quot;C:\\lookupdata.bin&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%x\0&quot;,<sp/>retVal);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal)</highlight></codeline>
</programlisting> Output: (binary file data can&apos;t be displayed).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytesToRead</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (the number bytes read in). If 0; numBytesToRead = maxBufferSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;r&quot; for read, &quot;r+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to offset from origin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="208" column="1" bodyfile="Ace.cpp" bodystart="7633" bodyend="7636"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a38223fc1f30e753afb34313ce190fc09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ReadBinaryFileW</definition>
        <argsstring>(wchar_t *filePath, size_t numBytesToRead=0, size_t maxBufferSize=MAX_STRING_BUFFER_SIZE, const wchar_t *mode=L&quot;rb, ccs=UTF-8&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>ReadBinaryFileW</name>
        <param>
          <type>wchar_t *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBytesToRead</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxBufferSize</declname>
          <defval><ref refid="_ace_8h_1a3fb0211ecf1dc4bdd8c17c2959ff732c" kindref="member">MAX_STRING_BUFFER_SIZE</ref></defval>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>mode</declname>
          <defval>L&quot;rb, ccs=UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for reading and returns a wide char buffer containing some or all of the data in the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">//By<sp/>default,<sp/>read<sp/>mode<sp/>is<sp/>set<sp/>to<sp/>&quot;r,<sp/>ccs=UTF-8&quot;.</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>retVal<sp/>=<sp/>Ace::ReadBinaryFileW(L&quot;C:\\lookupdata.bin&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%x\0&quot;,<sp/>retVal);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(retVal);</highlight></codeline>
</programlisting> Output: (binary file data can&apos;t be displayed).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytesToRead</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer (the number bytes read in). If 0; numBytesToRead = maxBufferSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;r&quot; for read, &quot;r, ccs=UTF-8&quot; for read unicode, &quot;r+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to offset from origin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="209" column="1" bodyfile="Ace.cpp" bodystart="7665" bodyend="7668"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a1126579b6ddd052f90e987ef056fad70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; char * &gt;</type>
        <definition>vector&lt; char * &gt; Ace::RetrieveFileNames</definition>
        <argsstring>(char *fullFilePath)</argsstring>
        <name>RetrieveFileNames</name>
        <param>
          <type>char *</type>
          <declname>fullFilePath</declname>
        </param>
        <briefdescription>
<para>Returns all the names of the files inside a folder, Ignores non files like folders. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>7/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>imageFilePath<sp/>=<sp/>&quot;C:\\Images\\180Panoramic&quot;;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;char*&gt;<sp/>fileNames<sp/>=<sp/>Ace::RetrieveFileNames(imageFilePath);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fileNames.size();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>fileNames[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(fileNames[i]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:sky.jpg mountans.png tits.gtfo dontread.txt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to look inside.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector array containing all the file names in the folder. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="210" column="1" bodyfile="Ace.cpp" bodystart="7695" bodyend="7743"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5ade52ee2c4a73cb571a27f71cd91028" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; wchar_t * &gt;</type>
        <definition>vector&lt; wchar_t * &gt; Ace::RetrieveFileNames</definition>
        <argsstring>(wchar_t *fullFilePath)</argsstring>
        <name>RetrieveFileNames</name>
        <param>
          <type>wchar_t *</type>
          <declname>fullFilePath</declname>
        </param>
        <briefdescription>
<para>Returns all the names of the files inside a folder, Ignores non files like folders. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>imageFilePath<sp/>=<sp/>L&quot;C:\\Users\\Eddie\\Desktop\\KatianieWorkspace\\PanoramicVR\\Images\\180Panoramic&quot;;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;wchar_t*&gt;<sp/>fileNames<sp/>=<sp/>Ace::RetrieveFileNames(imageFilePath);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fileNames.size();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>fileNames[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(fileNames[i]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:sky.jpg mountans.png tits.gtfo dontread.txt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to look inside.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector array containing all the file names in the folder. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="211" column="1" bodyfile="Ace.cpp" bodystart="7770" bodyend="7818"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5336deec9aeb39d6239b5ce09a396e80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; char * &gt;</type>
        <definition>vector&lt; char * &gt; Ace::RetrieveFolderNames</definition>
        <argsstring>(char *fullFilePath)</argsstring>
        <name>RetrieveFolderNames</name>
        <param>
          <type>char *</type>
          <declname>fullFilePath</declname>
        </param>
        <briefdescription>
<para>Returns all the names of the sub-folder(s) in a folder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>6/1/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>imageFilePath<sp/>=<sp/>&quot;C:\\Images\\&quot;;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;char*&gt;<sp/>folderNames<sp/>=<sp/>Ace::RetrieveFolderNames(imageFilePath);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>folderNames.size();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>folderNames[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(folderNames[i]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:180 panoramics 360 panoramics photospheres</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to look inside.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector array containing all the sub-folder names in the folder. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="212" column="1" bodyfile="Ace.cpp" bodystart="7844" bodyend="7893"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0d676a65bbb1f524cd6b0d0ac3f99013" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; wchar_t * &gt;</type>
        <definition>vector&lt; wchar_t * &gt; Ace::RetrieveFolderNames</definition>
        <argsstring>(wchar_t *fullFilePath)</argsstring>
        <name>RetrieveFolderNames</name>
        <param>
          <type>wchar_t *</type>
          <declname>fullFilePath</declname>
        </param>
        <briefdescription>
<para>Returns all the names of the sub-folder(s) in a folder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>imageFilePath<sp/>=<sp/>L&quot;C:\\Users\\Eddie\\Desktop\\KatianieWorkspace\\PanoramicVR\\Images\\&quot;;</highlight></codeline>
<codeline><highlight class="normal">vector&lt;wchar_t*&gt;<sp/>folderNames<sp/>=<sp/>Ace::RetrieveFolderNames(imageFilePath);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>folderNames.size();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%S\n&quot;,<sp/>folderNames[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(folderNames[i]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Output:180 panoramics 360 panoramics photospheres</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fullFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to look inside.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector array containing all the sub-folder names in the folder. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="213" column="1" bodyfile="Ace.cpp" bodystart="7919" bodyend="7968"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1acebc93fbbb2ead1c7177b42b64826b00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::ReverseString</definition>
        <argsstring>(char *strToReverse)</argsstring>
        <name>ReverseString</name>
        <param>
          <type>char *</type>
          <declname>strToReverse</declname>
        </param>
        <briefdescription>
<para>Creates a new string containing all the characters from strToReverse in reverse order. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;ABCDEF&quot; will return &quot;FEDCBA&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>Ace::ReverseString(&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:FEDCBA</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToReverse</parametername>
</parameternamelist>
<parameterdescription>
<para>A string to reverse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing the reverse of strToReverse. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="214" column="1" bodyfile="Ace.cpp" bodystart="7989" bodyend="8000"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a310c25048fb63e5c43134c894eb71369" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::ReverseString</definition>
        <argsstring>(wchar_t *strToReverse)</argsstring>
        <name>ReverseString</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToReverse</declname>
        </param>
        <briefdescription>
<para>Creates a new wide string containing all the characters from strToReverse in reverse order. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;ABCDEF&quot; will return &quot;FEDCBA&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>Ace::ReverseString(L&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:FEDCBA</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">strToReverse</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string to reverse.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created wide string containing the reverse of strToReverse. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="215" column="1" bodyfile="Ace.cpp" bodystart="8021" bodyend="8032"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9bd246903778d20a982765bea54ec8f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ReverseStringInPlace</definition>
        <argsstring>(char *strToReverse)</argsstring>
        <name>ReverseStringInPlace</name>
        <param>
          <type>char *</type>
          <declname>strToReverse</declname>
        </param>
        <briefdescription>
<para>Directly modifies strToReverse to have all its characters in reverse order. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;ABCDEF&quot; will return &quot;FEDCBA&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>(char*)Ace::AllocateAndCopyString(&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ReverseStringInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:(Displayed above)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToReverse</parametername>
</parameternamelist>
<parameterdescription>
<para>A preallocated string to reverse. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="216" column="1" bodyfile="Ace.cpp" bodystart="8052" bodyend="8072"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a1b0e0afa5c975cc03845b6a79331f228" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ace::ReverseStringInPlace</definition>
        <argsstring>(wchar_t *strToReverse)</argsstring>
        <name>ReverseStringInPlace</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToReverse</declname>
        </param>
        <briefdescription>
<para>Directly modifies strToReverse to have all its characters in reverse order. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;ABCDEF&quot; will return &quot;FEDCBA&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>(wchar_t*)Ace::AllocateAndCopyString(L&quot;ABCDEF&quot;);</highlight></codeline>
<codeline><highlight class="normal">Ace::ReverseStringInPlace(data);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(data);</highlight></codeline>
</programlisting> Output:(Displayed above)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToReverse</parametername>
</parameternamelist>
<parameterdescription>
<para>A preallocated string to reverse. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="217" column="1" bodyfile="Ace.cpp" bodystart="8092" bodyend="8112"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7bf2286843651fe1cd72b037a1030320" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Ace::RoundToNearestInteger</definition>
        <argsstring>(double num)</argsstring>
        <name>RoundToNearestInteger</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Rounds the floating-point argument num to an integer value, using the current rounding mode. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">long<sp/>result<sp/>=<sp/>Ace::RoundToNearestInteger(3.5);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The num rounded using the current rounding mode. If a mathematical error occurs then -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="218" column="1" bodyfile="Ace.cpp" bodystart="8134" bodyend="8160"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a892854a0074451f70c0bfa9568b7c7eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Ace::RoundToNearestInteger</definition>
        <argsstring>(float num)</argsstring>
        <name>RoundToNearestInteger</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Rounds the floating-point argument num to an integer value, using the current rounding mode. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">long<sp/>result<sp/>=<sp/>Ace::RoundToNearestInteger(3.5f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The num rounded using the current rounding mode. If a mathematical error occurs then -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="219" column="1" bodyfile="Ace.cpp" bodystart="8182" bodyend="8208"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a020fc7df33dce4679ed8a392da725b8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Ace::RoundUp</definition>
        <argsstring>(double num)</argsstring>
        <name>RoundUp</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the nearest integer value to num (in integer format), rounding halfway cases away from zero, regardless of the current rounding mode. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">long<sp/>result<sp/>=<sp/>Ace::RoundUp(3.5);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest integer value to num, rounding halfway cases away from zero. If a mathematical error occurs then -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="220" column="1" bodyfile="Ace.cpp" bodystart="8231" bodyend="8257"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5feb3de75f4f946d79f4ff56389f93cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Ace::RoundUp</definition>
        <argsstring>(float num)</argsstring>
        <name>RoundUp</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Calculates the nearest integer value to num (in integer format), rounding halfway cases away from zero, regardless of the current rounding mode. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">long<sp/>result<sp/>=<sp/>Ace::RoundUp(3.5f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 4</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to round.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nearest integer value to num, rounding halfway cases away from zero. If a mathematical error occurs then -1 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="221" column="1" bodyfile="Ace.cpp" bodystart="8280" bodyend="8306"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab20988efdaa2f4ad09ee73c6ce108e19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::SinH</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>SinH</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the SinH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/4/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::SinH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.868671</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate SinH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SinH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="222" column="1" bodyfile="Ace.cpp" bodystart="8327" bodyend="8353"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a3e7c3e005fd8cb91de75cbf911766bf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::SinH</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>SinH</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the SinH in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::SinH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 0.868671</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number in radians to calculate SinH for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SinH of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="223" column="1" bodyfile="Ace.cpp" bodystart="8374" bodyend="8400"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a43a41e4cedf8be5164b3938a010028c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Smallest</definition>
        <argsstring>(double num1, double num2)</argsstring>
        <name>Smallest</name>
        <param>
          <type>double</type>
          <declname>num1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>num2</declname>
        </param>
        <briefdescription>
<para>Calculates the smaller of the two values and returns the smaller one. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Smallest(5.002,<sp/>5.01);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 5.002000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num2</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smaller of the two values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="224" column="1" bodyfile="Ace.cpp" bodystart="8421" bodyend="8424"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad07c864576d94daac736fe121ae87a02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Smallest</definition>
        <argsstring>(float num1, float num2)</argsstring>
        <name>Smallest</name>
        <param>
          <type>float</type>
          <declname>num1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>num2</declname>
        </param>
        <briefdescription>
<para>Calculates the smaller of the two values and returns the smaller one. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Smallest(5.002f,<sp/>5.01f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 5.002000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num1</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num2</parametername>
</parameternamelist>
<parameterdescription>
<para>Other number to compare.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smaller of the two values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="225" column="1" bodyfile="Ace.cpp" bodystart="8445" bodyend="8448"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a29179fe6de4ef729c5922aeafbde9821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::SquareRoot</definition>
        <argsstring>(double num)</argsstring>
        <name>SquareRoot</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Returns the Square Root of the provided number. </para>        </briefdescription>
        <detaileddescription>
<para>If the number provided is negative, -1 is returned.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/29/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>squareRoot<sp/>=<sp/>Ace::SquareRoot(144.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>squareRoot);</highlight></codeline>
</programlisting> Output: 12.000000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to take the Square Root of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If num is negative; -1 is returned, else the Square Root is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="226" column="1" bodyfile="Ace.cpp" bodystart="8469" bodyend="8481"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ad29221122ff5bc838ed5741cef72364b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::SquareRoot</definition>
        <argsstring>(float num)</argsstring>
        <name>SquareRoot</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Returns the Square Root of the provided number. </para>        </briefdescription>
        <detaileddescription>
<para>If the number provided is negative, -1 is returned.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>squareRoot<sp/>=<sp/>Ace::SquareRoot(144.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>squareRoot);</highlight></codeline>
</programlisting> Output: 12.000000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to take the Square Root of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If num is negative; -1 is returned, else the Square Root is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="227" column="1" bodyfile="Ace.cpp" bodystart="8502" bodyend="8514"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ab94f6a0b50f95846b20a921c1c48cbbd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * Ace::SubString</definition>
        <argsstring>(char *str, int startIndex, int upToButNotIncludingIndex=INT_MAX)</argsstring>
        <name>SubString</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upToButNotIncludingIndex</declname>
          <defval>INT_MAX</defval>
        </param>
        <briefdescription>
<para>Returns a string containing the characters between startIndex and upToButNotIncludingIndex. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike strstr(), this function creates a new string and returns it. If upToButNotIncludingIndex is not provided, then the string returned is everything from startIndex to the end of the string.</para><para>Here&apos;s an example: str = &quot;Happiness&quot; startIndex = 3 upToButNotIncludingIndex = 8 then the output would be &quot;pines&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>substr<sp/>=<sp/>Ace::SubString(&quot;Happiness&quot;,<sp/>3,<sp/>8);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>substr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(substr);</highlight></codeline>
</programlisting> Output:pines</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of where to start parsing str. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">upToButNotIncludingIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of where to stop.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created string containing the characters from startIndex to upToButNotIncludingIndex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="228" column="1" bodyfile="Ace.cpp" bodystart="8546" bodyend="8592"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7d4131741f469b7220631088526e12ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t *</type>
        <definition>wchar_t * Ace::SubString</definition>
        <argsstring>(wchar_t *str, int startIndex, int upToButNotIncludingIndex=INT_MAX)</argsstring>
        <name>SubString</name>
        <param>
          <type>wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upToButNotIncludingIndex</declname>
          <defval>INT_MAX</defval>
        </param>
        <briefdescription>
<para>Returns a wide string containing the characters between startIndex and upToButNotIncludingIndex. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike strstr(), this function creates a new string and returns it. If upToButNotIncludingIndex is not provided, then the string returned is everything from startIndex to the end of the string.</para><para>Here&apos;s an example: str = &quot;Happiness&quot; startIndex = 3 upToButNotIncludingIndex = 8 then the output would be &quot;pines&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>substr<sp/>=<sp/>Ace::SubString(L&quot;Happiness&quot;,<sp/>3,<sp/>8);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%S\n&quot;,<sp/>substr);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(substr);</highlight></codeline>
</programlisting> Output:pines</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>The wide string to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of where to start parsing str. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">upToButNotIncludingIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The (0 based) index of where to stop.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created wide string containing the characters from startIndex to upToButNotIncludingIndex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="229" column="1" bodyfile="Ace.cpp" bodystart="8624" bodyend="8670"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8434cb3dc1700eb767a393087cf35ade" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Tan</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>Tan</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the Tangent (Tan) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265358979;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Tan(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 1.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its tangent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Tangent (tan) of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="230" column="1" bodyfile="Ace.cpp" bodystart="8692" bodyend="8718"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8733891f27eea8b6725acd6ef81c123e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Tan</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>Tan</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates the Tangent (Tan) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265358979f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Tan(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 1.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its tangent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Tangent (tan) of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="231" column="1" bodyfile="Ace.cpp" bodystart="8740" bodyend="8766"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1abeaf6de454adb6cbec71470d9c290631" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::TanH</definition>
        <argsstring>(double numInRadians)</argsstring>
        <name>TanH</name>
        <param>
          <type>double</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates The Hyperbolic Tangent (TanH) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>double<sp/>PI<sp/>=<sp/>3.14159265358979;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::TanH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 0.655794</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its hyperbolic tangent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Hyperbolic Tangent (tan) of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="232" column="1" bodyfile="Ace.cpp" bodystart="8788" bodyend="8814"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ac035088ac628b78d0af94c801211dae8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::TanH</definition>
        <argsstring>(float numInRadians)</argsstring>
        <name>TanH</name>
        <param>
          <type>float</type>
          <declname>numInRadians</declname>
        </param>
        <briefdescription>
<para>Calculates The Hyperbolic Tangent (TanH) of numInRadians in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">const<sp/>float<sp/>PI<sp/>=<sp/>3.14159265358979f;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::TanH(PI<sp/>/<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 0.655794</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numInRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to use to calculate its hyperbolic tangent.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Hyperbolic Tangent (tan) of numInRadians. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="233" column="1" bodyfile="Ace.cpp" bodystart="8836" bodyend="8862"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a8e948c04ce26696ede60e70c5f70c361" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** Ace::Tokenize</definition>
        <argsstring>(char *strToTokenize, char *delimiter, int &amp;outNumTokensFound)</argsstring>
        <name>Tokenize</name>
        <param>
          <type>char *</type>
          <declname>strToTokenize</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outNumTokensFound</declname>
        </param>
        <briefdescription>
<para>Breaks up a string and returns an array of all the strings between each delimiter. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;Shit,Piss, Cunt,Cock-sucker,Mother_Fucker,and tits&quot; And the delimiter was &quot;,&quot; then the function would return: Array[0] = &quot;Shit&quot; Array[1] = &quot;Piss&quot; Array[2] = &quot; Cunt&quot; Array[3] = &quot;Cock-sucker&quot; Array[4] = &quot;Mother_Fucker&quot; Array[5] = &quot;and tits&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>5/7/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>numItems<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">char*<sp/>data<sp/>=<sp/>&quot;Shit,<sp/>Piss,<sp/>Cunt,<sp/>Cock<sp/>-<sp/>sucker,<sp/>Mother_Fucker,<sp/>and<sp/>tits&quot;;</highlight></codeline>
<codeline><highlight class="normal">char**<sp/>items<sp/>=<sp/>Ace::Tokenize(data,<sp/>&quot;,&quot;,<sp/>numItems);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numItems;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%s\n&quot;,<sp/>currIndex,<sp/>items[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(items[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(items);</highlight></codeline>
</programlisting> Output:Array[0] = &quot;Shit&quot; Array[1] = &quot;Piss&quot; Array[2] = &quot; Cunt&quot; Array[3] = &quot;Cock-sucker&quot; Array[4] = &quot;Mother_Fucker&quot; Array[5] = &quot;and tits&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToTokenize</parametername>
</parameternamelist>
<parameterdescription>
<para>A string to break up into an array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>A string/character used to separate each string in strToTokenize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">outNumTokensFound</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strings added to the final array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of strings broken up from strToTokenize. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="234" column="1" bodyfile="Ace.cpp" bodystart="8904" bodyend="8964"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a31130831d9560838ac2a2cb54cd6f876" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wchar_t **</type>
        <definition>wchar_t ** Ace::Tokenize</definition>
        <argsstring>(wchar_t *strToTokenize, wchar_t *delimiter, int &amp;outNumTokensFound)</argsstring>
        <name>Tokenize</name>
        <param>
          <type>wchar_t *</type>
          <declname>strToTokenize</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>outNumTokensFound</declname>
        </param>
        <briefdescription>
<para>Breaks up a wide string and returns an array of all the wide strings between each delimiter. </para>        </briefdescription>
        <detaileddescription>
<para>For example: &quot;Shit,Piss, Cunt,Cock-sucker,Mother_Fucker,and tits&quot; And the delimiter was &quot;,&quot; then the function would return: Array[0] = &quot;Shit&quot; Array[1] = &quot;Piss&quot; Array[2] = &quot; Cunt&quot; Array[3] = &quot;Cock-sucker&quot; Array[4] = &quot;Mother_Fucker&quot; Array[5] = &quot;and tits&quot;.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>9/8/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>numItems<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">wchar_t*<sp/>data<sp/>=<sp/>L&quot;Shit,<sp/>Piss,<sp/>Cunt,<sp/>Cock<sp/>-<sp/>sucker,<sp/>Mother_Fucker,<sp/>and<sp/>tits&quot;;</highlight></codeline>
<codeline><highlight class="normal">wchar_t**<sp/>items<sp/>=<sp/>Ace::Tokenize(data,<sp/>L&quot;,&quot;,<sp/>numItems);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>currIndex<sp/>=<sp/>0;<sp/>currIndex<sp/>&lt;<sp/>numItems;<sp/>currIndex++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Array[%d]:%S\n&quot;,<sp/>currIndex,<sp/>items[currIndex]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_aligned_free(items[currIndex]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(items);</highlight></codeline>
</programlisting> Output:Array[0] = &quot;Shit&quot; Array[1] = &quot;Piss&quot; Array[2] = &quot; Cunt&quot; Array[3] = &quot;Cock-sucker&quot; Array[4] = &quot;Mother_Fucker&quot; Array[5] = &quot;and tits&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">strToTokenize</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string to break up into an array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string/character used to separate each wide string in strToTokenize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">outNumTokensFound</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of wide strings added to the final array.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of strings broken up from strToTokenize. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="235" column="1" bodyfile="Ace.cpp" bodystart="9006" bodyend="9066"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1aa10aa03639439fc61b99fa44d5f611ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::Truncate</definition>
        <argsstring>(double num)</argsstring>
        <name>Truncate</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Removes everything after the decimal point. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>retVal<sp/>=<sp/>Ace::Truncate(2.849543);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to truncate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The truncated version of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="236" column="1" bodyfile="Ace.cpp" bodystart="9087" bodyend="9113"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1ae512b20c30e74f66fef6c9d7fb14e331" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::Truncate</definition>
        <argsstring>(float num)</argsstring>
        <name>Truncate</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Removes everything after the decimal point. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/9/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>retVal<sp/>=<sp/>Ace::Truncate(2.849543f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>retVal);</highlight></codeline>
</programlisting> Output: 2.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to truncate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The truncated version of num. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="237" column="1" bodyfile="Ace.cpp" bodystart="9134" bodyend="9160"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a9c69db829c926e09d728f6f793414fc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ace::TwoToTheXPower</definition>
        <argsstring>(double power)</argsstring>
        <name>TwoToTheXPower</name>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates 2^power in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/5/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">double<sp/>result<sp/>=<sp/>Ace::TwoToTheXPower(6.0);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 64.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise 2 to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of 2^power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="238" column="1" bodyfile="Ace.cpp" bodystart="9180" bodyend="9206"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a0cb2b7227bece54575fd0cb20d5f8234" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Ace::TwoToTheXPower</definition>
        <argsstring>(float power)</argsstring>
        <name>TwoToTheXPower</name>
        <param>
          <type>float</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates 2^power in compliance with CERT Coding Standard. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/6/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">float<sp/>result<sp/>=<sp/>Ace::TwoToTheXPower(6.0f);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%f\n&quot;,<sp/>result);</highlight></codeline>
</programlisting> Output: 64.000000</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to raise 2 to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of 2^power. If a mathematical error occurs then -1.0 is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="239" column="1" bodyfile="Ace.cpp" bodystart="9226" bodyend="9252"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1af96ec8733f6e776aa2296afd79dfe38c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ace::WriteTextFile</definition>
        <argsstring>(char *filePath, char *bufferToWrite, size_t bufferSize, const char *mode=&quot;w&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>WriteTextFile</name>
        <param>
          <type>char *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>bufferToWrite</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
          <defval>&quot;w&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for writing and returns the number of items/elements written to the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">char*<sp/>buffer<sp/>=<sp/>Ace::AllocateAndCopyString(&quot;In<sp/>a<sp/>row?!&quot;);</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>bufferSize<sp/>=<sp/>strlen(buffer)<sp/>*<sp/>sizeof(char);</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>retVal<sp/>=<sp/>Ace::WriteTextFile(&quot;C:\\dicks.txt&quot;,<sp/>buffer,<sp/>bufferSize,<sp/>&quot;a&quot;);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
<codeline><highlight class="normal">buffer<sp/>=<sp/>Ace::ReadTextFile(&quot;C:\\dicks.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%s\n&quot;,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
</programlisting> Output: dicksdicksdicksdicksdicksdicksdick8=&gt;In a row?!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferToWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;w&quot; for write, &quot;w+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Either zero, or a value returned by ftell(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of items/elements written to the file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="240" column="1" bodyfile="Ace.cpp" bodystart="9283" bodyend="9333"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a7a200d3c2e606619c3044ea50904f632" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ace::WriteTextFileW</definition>
        <argsstring>(wchar_t *filePath, wchar_t *bufferToWrite, size_t bufferSize, const wchar_t *mode=L&quot;w, ccs=UTF-8&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>WriteTextFileW</name>
        <param>
          <type>wchar_t *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>bufferToWrite</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>mode</declname>
          <defval>L&quot;w, ccs=UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for writing and returns the number of items/elements written to the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">wchar_t*<sp/>buffer<sp/>=<sp/>Ace::AllocateAndCopyString(L&quot;いい　ですよ。&quot;);</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>bufferSize<sp/>=<sp/>wcslen(buffer)<sp/>*<sp/>sizeof(wchar_t);</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>retVal<sp/>=<sp/>Ace::WriteTextFileW(L&quot;C:\\jap.txt&quot;,<sp/>buffer,<sp/>bufferSize,<sp/>L&quot;a,<sp/>ccs=UTF-8&quot;);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
<codeline><highlight class="normal">buffer<sp/>=<sp/>Ace::ReadTextFileW(L&quot;C:\\jap.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">MessageBoxW(NULL,<sp/>buffer,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">_aligned_free(buffer);</highlight></codeline>
</programlisting> Output: わたし　わ　エドワド　オ’ハゲン　です。　これ　は　なん　です　か？いい　ですよ。</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferToWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;w&quot; for write, &quot;w+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Either zero, or a value returned by ftell(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of items/elements written to the file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="241" column="1" bodyfile="Ace.cpp" bodystart="9364" bodyend="9414"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a5796438df275d4868eda8e1d72991350" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ace::WriteBinaryFile</definition>
        <argsstring>(char *filePath, char *bufferToWrite, size_t bufferSize, const char *mode=&quot;wb&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>WriteBinaryFile</name>
        <param>
          <type>char *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>bufferToWrite</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
          <defval>&quot;wb&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for writing and returns the number of items/elements written to the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">size_t<sp/>numItemsWritten<sp/>=<sp/>Ace::WriteBinaryFile(&quot;C:\\lookupdata.bin&quot;,<sp/>&quot;0xFFFFFFFF&quot;,<sp/>11);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\0&quot;,<sp/>numItemsWritten);</highlight></codeline>
</programlisting> Output: 11</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferToWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;w&quot; for write, &quot;w+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to offset from origin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="242" column="1" bodyfile="Ace.cpp" bodystart="9440" bodyend="9443"/>
      </memberdef>
      <memberdef kind="function" id="class_ace_1a3dd67050348d7bd1838b2a85e53a93f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ace::WriteBinaryFileW</definition>
        <argsstring>(wchar_t *filePath, wchar_t *bufferToWrite, size_t bufferSize, const wchar_t *mode=L&quot;wb, ccs=UTF-8&quot;, int seekOffset=0, int seekOrigin=SEEK_SET, long *outEndCursorPos=NULL)</argsstring>
        <name>WriteBinaryFileW</name>
        <param>
          <type>wchar_t *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>bufferToWrite</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>mode</declname>
          <defval>L&quot;wb, ccs=UTF-8&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seekOrigin</declname>
          <defval>SEEK_SET</defval>
        </param>
        <param>
          <type>long *</type>
          <declname>outEndCursorPos</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Opens a file for writing and returns the number of items/elements written to the file. </para>        </briefdescription>
        <detaileddescription>
<para>Created in compliance with the CERT Coding Standard.</para><para><simplesect kind="author"><para>Katianie </para></simplesect>
<simplesect kind="date"><para>10/13/2016</para></simplesect>
<programlisting><codeline><highlight class="normal">size_t<sp/>numItemsWritten<sp/>=<sp/>Ace::WriteBinaryFile(L&quot;C:\\lookupdata.bin&quot;,<sp/>L&quot;0xFFFFFFFF&quot;,<sp/>11);</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;%d\0&quot;,<sp/>numItemsWritten);</highlight></codeline>
</programlisting> Output: 11</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferToWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for fopen_s (&quot;w&quot; for write, &quot;w+&quot; for read/write, etc). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to offset from origin. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekOrigin</parametername>
</parameternamelist>
<parameterdescription>
<para>Position used as reference for the offset (SEEK_SET represents beginning of file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">outEndCursorPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The value returned by ftell() after doing the read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The buffer containing the file data of size numBytesToRead. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ace.h" line="243" column="1" bodyfile="Ace.cpp" bodystart="9469" bodyend="9472"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Ace.h" line="39" column="1" bodyfile="Ace.h" bodystart="38" bodyend="244"/>
    <listofallmembers>
      <member refid="class_ace_1ae1d25ce89a5152ac3dd591aa75c57764" prot="public" virt="non-virtual"><scope>Ace</scope><name>AbsoluteValue</name></member>
      <member refid="class_ace_1ae573ce4a06f6050b29e5c8ad3285b05c" prot="public" virt="non-virtual"><scope>Ace</scope><name>AbsoluteValue</name></member>
      <member refid="class_ace_1ae84033e0edc7822aa6a1cd3d6147dac8" prot="public" virt="non-virtual"><scope>Ace</scope><name>AllocateAndCopyString</name></member>
      <member refid="class_ace_1a7df3d37c864aaded3894cff9fcb72b71" prot="public" virt="non-virtual"><scope>Ace</scope><name>AllocateAndCopyString</name></member>
      <member refid="class_ace_1aec125b75d04c5ae6b9ba3f77d9ae5303" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcCos</name></member>
      <member refid="class_ace_1aa2cd7566162e0d739d730444a99b395a" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcCos</name></member>
      <member refid="class_ace_1a315b29bc2074a8f2354e9607fdca545c" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcCosh</name></member>
      <member refid="class_ace_1a967e4ba19d22783893f86204712cce81" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcCosh</name></member>
      <member refid="class_ace_1a6dda55fe05e7f2874f44e9347d64068a" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcSin</name></member>
      <member refid="class_ace_1ab254fa951c7846affad26371c3ff2a12" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcSin</name></member>
      <member refid="class_ace_1aa4e43dbae9fc597031f96b6826077792" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcSinH</name></member>
      <member refid="class_ace_1aff6eb5ec6b5bf00bc9dab3187c0e1a35" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcSinH</name></member>
      <member refid="class_ace_1a34a530e5c9e7d179fa411cb182fd4b52" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTan</name></member>
      <member refid="class_ace_1a2360cc88ef910ae6eff49033072e5273" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTan</name></member>
      <member refid="class_ace_1ade721fa5fb6371e4ba4863413be468c2" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTan2</name></member>
      <member refid="class_ace_1a212a9d7345151ebaa457c693b4f110c4" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTan2</name></member>
      <member refid="class_ace_1ab95c327492c783547e8c16c4dd9570d8" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTanH</name></member>
      <member refid="class_ace_1a3c43f19a4371770bbeacd76e8d8f5e24" prot="public" virt="non-virtual"><scope>Ace</scope><name>ArcTanH</name></member>
      <member refid="class_ace_1a24687acdeab8af43507fea6467f29247" prot="public" virt="non-virtual"><scope>Ace</scope><name>CalculateFileSize</name></member>
      <member refid="class_ace_1adb5ff5f5dff024aa0d089bb2a018f8a7" prot="public" virt="non-virtual"><scope>Ace</scope><name>CalculateFileSize</name></member>
      <member refid="class_ace_1ab8cc0635c5777ced01f1cd35948bafa2" prot="public" virt="non-virtual"><scope>Ace</scope><name>Ceiling</name></member>
      <member refid="class_ace_1a00736bf27104bf30fa2f3c4a463657ab" prot="public" virt="non-virtual"><scope>Ace</scope><name>Ceiling</name></member>
      <member refid="class_ace_1a63f81ff2236e723a0d84bd60dae9bb05" prot="public" virt="non-virtual"><scope>Ace</scope><name>CharAt</name></member>
      <member refid="class_ace_1a10123c2253ad11233dfe03584aa279c5" prot="public" virt="non-virtual"><scope>Ace</scope><name>CharAt</name></member>
      <member refid="class_ace_1a6905860b7a53563ab3c73b89e25160da" prot="public" virt="non-virtual"><scope>Ace</scope><name>ComplementaryErrorFunction</name></member>
      <member refid="class_ace_1a611ec18e97b274af873f785a557808e7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ComplementaryErrorFunction</name></member>
      <member refid="class_ace_1a54627c41eea2730839d98f33542a5492" prot="public" virt="non-virtual"><scope>Ace</scope><name>Concatenate</name></member>
      <member refid="class_ace_1a940cef052ddd6f308129a20fa2489d03" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConcatenateStrings</name></member>
      <member refid="class_ace_1a4d5ee021b1049844d690a884aa3beb31" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConcatenateStrings</name></member>
      <member refid="class_ace_1a8699d2d8921db243252650adde40c999" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConcatenateStrings</name></member>
      <member refid="class_ace_1a061739b0be1e26fcf5fc84d09fa9bd5d" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConcatenateStrings</name></member>
      <member refid="class_ace_1af0cd7dce3668bd1ee3e9f86b687caa5c" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConcatenateW</name></member>
      <member refid="class_ace_1af8c652e46bc6729b5619d794101540a2" prot="public" virt="non-virtual"><scope>Ace</scope><name>Contains</name></member>
      <member refid="class_ace_1ac0c4f1f93bb980eaf627a1dde757765d" prot="public" virt="non-virtual"><scope>Ace</scope><name>Contains</name></member>
      <member refid="class_ace_1aa1a0f98f4f52323b776c8da11d4af7f7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ContainsIgnoreCase</name></member>
      <member refid="class_ace_1a89a15437662eae89503cefc25e29a9f7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ContainsIgnoreCase</name></member>
      <member refid="class_ace_1aedf62dbbbeffecb146060a08a0fe07f7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertIntToBool</name></member>
      <member refid="class_ace_1ace7ef8961e95078c69f2058025960c09" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringArrayToStringVectorArray</name></member>
      <member refid="class_ace_1afdfed76bad657496dd0b9d18e887048b" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringArrayToStringVectorArray</name></member>
      <member refid="class_ace_1a9399ba5c75c6aa92dac1a8d1d9f4af61" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToBool</name></member>
      <member refid="class_ace_1a7b8a182a0d284265930026487405653a" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToBool</name></member>
      <member refid="class_ace_1a2dd19dedc9fa4b83a8db2115fc3b65bb" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToFloatArray</name></member>
      <member refid="class_ace_1a561b5633460e1f395b6e6fd12ab455f5" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToFloatArray</name></member>
      <member refid="class_ace_1a9735962c53182de52caffda3b7dd091f" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToHex</name></member>
      <member refid="class_ace_1aa575665aa3bc6f2366fabd3bdec04e25" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToHex</name></member>
      <member refid="class_ace_1a27a4d4bc0cfe1b489582bf937e27d0e1" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToOneLine</name></member>
      <member refid="class_ace_1a41c562a99b2eae02bed5d5c76b5ab8d9" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToOneLine</name></member>
      <member refid="class_ace_1a4ad8d96d9b8bad51a4364ae67fce4b73" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToOneLineInPlace</name></member>
      <member refid="class_ace_1a6ab37e5c15b1cc6595fb2865c7fc12b1" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToOneLineInPlace</name></member>
      <member refid="class_ace_1adebec5fecf3c418346f7e7233cac91f7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringToWCharString</name></member>
      <member refid="class_ace_1a5b925726cd02b9a41f8648173b8a4cd5" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringVectorArrayToStringArray</name></member>
      <member refid="class_ace_1a7188a081ac708dc23678f3c5d56decb8" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertStringVectorArrayToStringArray</name></member>
      <member refid="class_ace_1a28cad743308ecbc46147e0203e2b14f3" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToLowerCase</name></member>
      <member refid="class_ace_1aebe68e4280058616f63de68936cee206" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToLowerCase</name></member>
      <member refid="class_ace_1a040b39d22ec0282b5a4185aba3e37633" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToLowerCaseInPlace</name></member>
      <member refid="class_ace_1a756a560a676102e318b403f4cd12a750" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToLowerCaseInPlace</name></member>
      <member refid="class_ace_1a06f1154d2ce1775f53931aaf94c93f99" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToUpperCase</name></member>
      <member refid="class_ace_1a1fc45db42de7183ab5ec93a90a3f8cc7" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToUpperCase</name></member>
      <member refid="class_ace_1a4ce18b5ec8b3acce9219938b2d07af0b" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToUpperCaseInPlace</name></member>
      <member refid="class_ace_1ab11cca7bc0da989b9bf6bd1158601fdd" prot="public" virt="non-virtual"><scope>Ace</scope><name>ConvertToUpperCaseInPlace</name></member>
      <member refid="class_ace_1a59f079afef33f0a7bed749afbf777c36" prot="public" virt="non-virtual"><scope>Ace</scope><name>Cos</name></member>
      <member refid="class_ace_1a55bebe92cca4c2a94f2cb30431475dea" prot="public" virt="non-virtual"><scope>Ace</scope><name>Cos</name></member>
      <member refid="class_ace_1a2a3e08791d5a9e794a02c118daca3402" prot="public" virt="non-virtual"><scope>Ace</scope><name>CosH</name></member>
      <member refid="class_ace_1a428056578b18e534a419d4fde48c1fef" prot="public" virt="non-virtual"><scope>Ace</scope><name>CosH</name></member>
      <member refid="class_ace_1a4202759241426cfbbc2c15b5ea218ec8" prot="public" virt="non-virtual"><scope>Ace</scope><name>CountNumOccurrences</name></member>
      <member refid="class_ace_1ad46096b28cff4e653243e0a0a3656f59" prot="public" virt="non-virtual"><scope>Ace</scope><name>CountNumOccurrences</name></member>
      <member refid="class_ace_1ad9d6a9afe8007466f657522d9492dc89" prot="public" virt="non-virtual"><scope>Ace</scope><name>CountNumOccurrences</name></member>
      <member refid="class_ace_1aafbcb7320a4d903a15ef1039c78bd131" prot="public" virt="non-virtual"><scope>Ace</scope><name>CountNumOccurrences</name></member>
      <member refid="class_ace_1abf907ab5be1efd6f81532d2cb9f2a809" prot="public" virt="non-virtual"><scope>Ace</scope><name>CubeRoot</name></member>
      <member refid="class_ace_1aace71b982b1bdb3ed617b32e01335140" prot="public" virt="non-virtual"><scope>Ace</scope><name>CubeRoot</name></member>
      <member refid="class_ace_1ad4386a90f9491cc97945787e15e7554c" prot="public" virt="non-virtual"><scope>Ace</scope><name>DegreesToRadians</name></member>
      <member refid="class_ace_1a30d2e65624fcc7f6143bf16955f9fabd" prot="public" virt="non-virtual"><scope>Ace</scope><name>DegreesToRadians</name></member>
      <member refid="class_ace_1a63153a0d492cb0cbe3a4cd69fee74684" prot="public" virt="non-virtual"><scope>Ace</scope><name>DoesFileExist</name></member>
      <member refid="class_ace_1a8391ff72632a4406b4cf1b8936bd908d" prot="public" virt="non-virtual"><scope>Ace</scope><name>DoesFileExist</name></member>
      <member refid="class_ace_1a986a84d68783456d3c97b467cece5635" prot="public" virt="non-virtual"><scope>Ace</scope><name>Equals</name></member>
      <member refid="class_ace_1a613fd5b028d5ba0ac5c7de30ab744266" prot="public" virt="non-virtual"><scope>Ace</scope><name>Equals</name></member>
      <member refid="class_ace_1a5310b61a074383bf2ee4df005c6784e1" prot="public" virt="non-virtual"><scope>Ace</scope><name>EqualsIgnoreCase</name></member>
      <member refid="class_ace_1abef72240bed5aa10df9b9f8bceec3bb9" prot="public" virt="non-virtual"><scope>Ace</scope><name>EqualsIgnoreCase</name></member>
      <member refid="class_ace_1aa522bbdb8b2d83603bf89f64714f4d89" prot="public" virt="non-virtual"><scope>Ace</scope><name>ErrorFunction</name></member>
      <member refid="class_ace_1a93a5ce3eee3f3fabb6fa3a0ac9b2c8c4" prot="public" virt="non-virtual"><scope>Ace</scope><name>ErrorFunction</name></member>
      <member refid="class_ace_1ae51ded8e8e681b85ee397e381068dbca" prot="public" virt="non-virtual"><scope>Ace</scope><name>EToTheXPower</name></member>
      <member refid="class_ace_1a263f99643d5a480447b556856b016b37" prot="public" virt="non-virtual"><scope>Ace</scope><name>EToTheXPower</name></member>
      <member refid="class_ace_1a50cb517fc19d73e44bb9c3cc1141d7bc" prot="public" virt="non-virtual"><scope>Ace</scope><name>EToTheXPowerMinusOne</name></member>
      <member refid="class_ace_1a544ff3061a586b5cdedddbf21287ae22" prot="public" virt="non-virtual"><scope>Ace</scope><name>EToTheXPowerMinusOne</name></member>
      <member refid="class_ace_1aca1a612de325a7636ef40c95b676795d" prot="public" virt="non-virtual"><scope>Ace</scope><name>FirstChar</name></member>
      <member refid="class_ace_1a0e34aae1025e81ad4684b34940a70959" prot="public" virt="non-virtual"><scope>Ace</scope><name>FirstChar</name></member>
      <member refid="class_ace_1a509e6fda4da886680951615f2ac2d421" prot="public" virt="non-virtual"><scope>Ace</scope><name>Floor</name></member>
      <member refid="class_ace_1ae821a3392f3637b82112c010f060026b" prot="public" virt="non-virtual"><scope>Ace</scope><name>Floor</name></member>
      <member refid="class_ace_1a06b87693241afd13cfe45e052e6196f0" prot="public" virt="non-virtual"><scope>Ace</scope><name>GammaFunction</name></member>
      <member refid="class_ace_1afe867fa9d28bd8f4233fd488b5e533ee" prot="public" virt="non-virtual"><scope>Ace</scope><name>GammaFunction</name></member>
      <member refid="class_ace_1af052dd5bee7f50a8f80f3af4375a874a" prot="public" virt="non-virtual"><scope>Ace</scope><name>GenerateRandomNum</name></member>
      <member refid="class_ace_1a913e668440d1c00f00d340519bf95a7c" prot="public" virt="non-virtual"><scope>Ace</scope><name>Hypotenuse</name></member>
      <member refid="class_ace_1aaa3ee98b16b39b101f3258803bc1e03d" prot="public" virt="non-virtual"><scope>Ace</scope><name>Hypotenuse</name></member>
      <member refid="class_ace_1a50a722b64f2f7a54b297cb5beae7330b" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOf</name></member>
      <member refid="class_ace_1acf9bd88f509f374f6020dc19c7a77252" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOf</name></member>
      <member refid="class_ace_1a273501ca36610e1631ff37b2dd93cddf" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOfFirstLetter</name></member>
      <member refid="class_ace_1ae0ec852c9eea044d4a1dcb0d03462166" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOfFirstLetter</name></member>
      <member refid="class_ace_1a5e24b813ba1540fc92502435e4d817ce" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOfIgnoreCase</name></member>
      <member refid="class_ace_1a0827c26650755411f44c94920142c421" prot="public" virt="non-virtual"><scope>Ace</scope><name>IndexOfIgnoreCase</name></member>
      <member refid="class_ace_1a488c9ea590fdf14919ad90ee1dc377ad" prot="public" virt="non-virtual"><scope>Ace</scope><name>InsertString</name></member>
      <member refid="class_ace_1ac4a643953262f0837db5074a66286787" prot="public" virt="non-virtual"><scope>Ace</scope><name>InsertString</name></member>
      <member refid="class_ace_1aebb4f615642b84d54134e02e3fc8c083" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsAlphabetic</name></member>
      <member refid="class_ace_1a658aece7e64b90e57ac08f8b79b8ed0c" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsAlphabetic</name></member>
      <member refid="class_ace_1ab5bdc2fab29cf22bd6c06e62a5eab593" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsDigit</name></member>
      <member refid="class_ace_1a2e41b7c6ba214c7088e723a9027cf197" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsDigit</name></member>
      <member refid="class_ace_1a2f5cb4c89dff665ea2c0e1fd16fefd90" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsEmpty</name></member>
      <member refid="class_ace_1abdfef27ea8065e456ad40cc31df5d66a" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsEmpty</name></member>
      <member refid="class_ace_1abf209e3f71042eefd2091b990f0fc6f6" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsNumber</name></member>
      <member refid="class_ace_1a78e3339b16bfe5d33d54e8a1f8961016" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsNumber</name></member>
      <member refid="class_ace_1a14d72992e536c2a370f5c779cc3b1f5a" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsPathADevice</name></member>
      <member refid="class_ace_1a2428e78c087c5582b690452ff0ace6e3" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsPathADevice</name></member>
      <member refid="class_ace_1a66a594470f47320362a57ae4a4a556aa" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsWhitespace</name></member>
      <member refid="class_ace_1a7923870bcd0a10fedf5d809421eabcd2" prot="public" virt="non-virtual"><scope>Ace</scope><name>IsWhitespace</name></member>
      <member refid="class_ace_1a8eae4684d32fec1d237da49b0ad57da9" prot="public" virt="non-virtual"><scope>Ace</scope><name>Largest</name></member>
      <member refid="class_ace_1a02b6e67c430dd5750862a6ed3356c8ed" prot="public" virt="non-virtual"><scope>Ace</scope><name>Largest</name></member>
      <member refid="class_ace_1ae0d85e7e3e82f46a0227b85f7112458c" prot="public" virt="non-virtual"><scope>Ace</scope><name>LastChar</name></member>
      <member refid="class_ace_1ad265da6c7c28b05d19489da9398302aa" prot="public" virt="non-virtual"><scope>Ace</scope><name>LastChar</name></member>
      <member refid="class_ace_1acf5ed5e07611ea7cc31b21d808b20e4d" prot="public" virt="non-virtual"><scope>Ace</scope><name>LastIndexOf</name></member>
      <member refid="class_ace_1ae0a414c4d05e32a3a1a93fdd9e2faf64" prot="public" virt="non-virtual"><scope>Ace</scope><name>LastIndexOf</name></member>
      <member refid="class_ace_1a278ffeb56149bc1cc75617d639b63468" prot="public" virt="non-virtual"><scope>Ace</scope><name>LogBaseTen</name></member>
      <member refid="class_ace_1ae49751bb233954e6d17505e1089d9f0c" prot="public" virt="non-virtual"><scope>Ace</scope><name>LogBaseTen</name></member>
      <member refid="class_ace_1af2bfc128e37911cda7a8af0b9a3a06b9" prot="public" virt="non-virtual"><scope>Ace</scope><name>LogBaseTwo</name></member>
      <member refid="class_ace_1a6a2fa76e6de2cc82a2eb64bd07053f68" prot="public" virt="non-virtual"><scope>Ace</scope><name>LogBaseTwo</name></member>
      <member refid="class_ace_1a6529499a01bc16109f19ebcb719019f7" prot="public" virt="non-virtual"><scope>Ace</scope><name>Mod</name></member>
      <member refid="class_ace_1ac623f8d6f81e2b1725ca7039815a94c7" prot="public" virt="non-virtual"><scope>Ace</scope><name>Mod</name></member>
      <member refid="class_ace_1a9521670cd2b0a4f90f58ee430e26a44c" prot="public" virt="non-virtual"><scope>Ace</scope><name>MultiplyThenAdd</name></member>
      <member refid="class_ace_1a934487848d6a37fef098f48d77473849" prot="public" virt="non-virtual"><scope>Ace</scope><name>MultiplyThenAdd</name></member>
      <member refid="class_ace_1a69ddb0ab24047c5175b3dc4fb3e8f3c6" prot="public" virt="non-virtual"><scope>Ace</scope><name>NaturalLog</name></member>
      <member refid="class_ace_1ae5ac7b240b43c5af775695af889c1734" prot="public" virt="non-virtual"><scope>Ace</scope><name>NaturalLog</name></member>
      <member refid="class_ace_1a2a3aa781cdf81480b5e1ce5075649ed4" prot="public" virt="non-virtual"><scope>Ace</scope><name>NaturalLogGammaFunction</name></member>
      <member refid="class_ace_1a698a0b446107e5226c61faa3f3922277" prot="public" virt="non-virtual"><scope>Ace</scope><name>NaturalLogGammaFunction</name></member>
      <member refid="class_ace_1a12241a4abf6a86ad707789cbe9979dd7" prot="public" virt="non-virtual"><scope>Ace</scope><name>NextIndexOf</name></member>
      <member refid="class_ace_1aeb1c9d5abc5fca76246008bada3bc55d" prot="public" virt="non-virtual"><scope>Ace</scope><name>NextIndexOf</name></member>
      <member refid="class_ace_1aeb3c690712a0eb95f5dd60ebb6ea0120" prot="public" virt="non-virtual"><scope>Ace</scope><name>NextIndexOf</name></member>
      <member refid="class_ace_1a0af0979cd0675ebeff6ff99621593f3d" prot="public" virt="non-virtual"><scope>Ace</scope><name>NextIndexOf</name></member>
      <member refid="class_ace_1a9beab58661041127b9073ec5ff8a275a" prot="public" virt="non-virtual"><scope>Ace</scope><name>NumTimesTwoToTheXPower</name></member>
      <member refid="class_ace_1a432c3d7cf654920eb21e72f0711db3d5" prot="public" virt="non-virtual"><scope>Ace</scope><name>NumTimesTwoToTheXPower</name></member>
      <member refid="class_ace_1a5a64e64344fe2e67ba61a945d29ac95a" prot="public" virt="non-virtual"><scope>Ace</scope><name>PositiveDifference</name></member>
      <member refid="class_ace_1a94ec5e1a6548f4dc778e26c4049dc6e0" prot="public" virt="non-virtual"><scope>Ace</scope><name>PositiveDifference</name></member>
      <member refid="class_ace_1adbcb9f24f9c412d29d7b671a3aa16c42" prot="public" virt="non-virtual"><scope>Ace</scope><name>Power</name></member>
      <member refid="class_ace_1abd44bbcb8b34e13bf23013af2522839d" prot="public" virt="non-virtual"><scope>Ace</scope><name>Power</name></member>
      <member refid="class_ace_1a4acd795a7bf9c65be8e4c4f5d5647ba0" prot="public" virt="non-virtual"><scope>Ace</scope><name>RadiansToDegrees</name></member>
      <member refid="class_ace_1a38a090d5bd7b5b5cff8650f259ee35ce" prot="public" virt="non-virtual"><scope>Ace</scope><name>RadiansToDegrees</name></member>
      <member refid="class_ace_1a9700d7264c30af90d9787a82c77170bb" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReadBinaryFile</name></member>
      <member refid="class_ace_1a38223fc1f30e753afb34313ce190fc09" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReadBinaryFileW</name></member>
      <member refid="class_ace_1a66dfff3d59c12f04d7d45841ad8a1e85" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReadTextFile</name></member>
      <member refid="class_ace_1a66aaa5acfe5830750b2c1d0658ac281b" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReadTextFileW</name></member>
      <member refid="class_ace_1a0f05443f499ce94d53c3a5e584460d52" prot="public" virt="non-virtual"><scope>Ace</scope><name>Remainder</name></member>
      <member refid="class_ace_1af4dcc33bb8d85f3b654edbcb0912f88b" prot="public" virt="non-virtual"><scope>Ace</scope><name>Remainder</name></member>
      <member refid="class_ace_1a83c9c251b60c0becf2ff3b5f6fc3f0ab" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemainderWithQuadrant</name></member>
      <member refid="class_ace_1a9aeabf43c45659c6024a4dce1ae2a1cc" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemainderWithQuadrant</name></member>
      <member refid="class_ace_1ae41b2d2f89451e9659550845170d328a" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveAllWhitespace</name></member>
      <member refid="class_ace_1a869247b2abaeca31aff7e12d030e0872" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveAllWhitespace</name></member>
      <member refid="class_ace_1a916dc3ddc85c0c5ad3840dfab4962f9e" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveAllWhitespaceInPlace</name></member>
      <member refid="class_ace_1aef98302ca6ffca2bf6ed13fd0f887a5d" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveAllWhitespaceInPlace</name></member>
      <member refid="class_ace_1ac4f88cf4ac3842c748ed4222bf885660" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveCharactersFromString</name></member>
      <member refid="class_ace_1a517caf5b3abb9d9480f654afa2e9c121" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveCharactersFromString</name></member>
      <member refid="class_ace_1a7a4f21e66792a5813fc50775ae75091c" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveCharactersFromStringInPlace</name></member>
      <member refid="class_ace_1a8b4630bd6fd620f1f9724a100f28acad" prot="public" virt="non-virtual"><scope>Ace</scope><name>RemoveCharactersFromStringInPlace</name></member>
      <member refid="class_ace_1aefcffafee15c9948c5bb0bac1173f770" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReplaceString</name></member>
      <member refid="class_ace_1a1dd586fdf352bde19e0d3c2e72eecac8" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReplaceString</name></member>
      <member refid="class_ace_1a4f524383b4ee4eadd4263824ed189790" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReplaceStringInPlace</name></member>
      <member refid="class_ace_1a8445bd902361e3c05edf04cce65949fe" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReplaceStringInPlace</name></member>
      <member refid="class_ace_1a15c42f6a53a7eaaf7a33b62d0cf3d015" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataBetweenTags</name></member>
      <member refid="class_ace_1ad3a908a447d305f769bd40af461e48e5" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataBetweenTags</name></member>
      <member refid="class_ace_1ac7c2687eabb6302150a0ef33dcc1e6c1" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataBetweenTags</name></member>
      <member refid="class_ace_1ac33be815c3d923b322217d9822471680" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataBetweenTags</name></member>
      <member refid="class_ace_1a639fcb40de735847ee36b09ebaf58243" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataChunksBetweenTags</name></member>
      <member refid="class_ace_1afc8d972571ec5b22f6a8553ac324fc3f" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveDataChunksBetweenTags</name></member>
      <member refid="class_ace_1a1126579b6ddd052f90e987ef056fad70" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveFileNames</name></member>
      <member refid="class_ace_1a5ade52ee2c4a73cb571a27f71cd91028" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveFileNames</name></member>
      <member refid="class_ace_1a5336deec9aeb39d6239b5ce09a396e80" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveFolderNames</name></member>
      <member refid="class_ace_1a0d676a65bbb1f524cd6b0d0ac3f99013" prot="public" virt="non-virtual"><scope>Ace</scope><name>RetrieveFolderNames</name></member>
      <member refid="class_ace_1acebc93fbbb2ead1c7177b42b64826b00" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReverseString</name></member>
      <member refid="class_ace_1a310c25048fb63e5c43134c894eb71369" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReverseString</name></member>
      <member refid="class_ace_1a9bd246903778d20a982765bea54ec8f4" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReverseStringInPlace</name></member>
      <member refid="class_ace_1a1b0e0afa5c975cc03845b6a79331f228" prot="public" virt="non-virtual"><scope>Ace</scope><name>ReverseStringInPlace</name></member>
      <member refid="class_ace_1a7bf2286843651fe1cd72b037a1030320" prot="public" virt="non-virtual"><scope>Ace</scope><name>RoundToNearestInteger</name></member>
      <member refid="class_ace_1a892854a0074451f70c0bfa9568b7c7eb" prot="public" virt="non-virtual"><scope>Ace</scope><name>RoundToNearestInteger</name></member>
      <member refid="class_ace_1a020fc7df33dce4679ed8a392da725b8b" prot="public" virt="non-virtual"><scope>Ace</scope><name>RoundUp</name></member>
      <member refid="class_ace_1a5feb3de75f4f946d79f4ff56389f93cd" prot="public" virt="non-virtual"><scope>Ace</scope><name>RoundUp</name></member>
      <member refid="class_ace_1ab20988efdaa2f4ad09ee73c6ce108e19" prot="public" virt="non-virtual"><scope>Ace</scope><name>SinH</name></member>
      <member refid="class_ace_1a3e7c3e005fd8cb91de75cbf911766bf3" prot="public" virt="non-virtual"><scope>Ace</scope><name>SinH</name></member>
      <member refid="class_ace_1a43a41e4cedf8be5164b3938a010028c8" prot="public" virt="non-virtual"><scope>Ace</scope><name>Smallest</name></member>
      <member refid="class_ace_1ad07c864576d94daac736fe121ae87a02" prot="public" virt="non-virtual"><scope>Ace</scope><name>Smallest</name></member>
      <member refid="class_ace_1a29179fe6de4ef729c5922aeafbde9821" prot="public" virt="non-virtual"><scope>Ace</scope><name>SquareRoot</name></member>
      <member refid="class_ace_1ad29221122ff5bc838ed5741cef72364b" prot="public" virt="non-virtual"><scope>Ace</scope><name>SquareRoot</name></member>
      <member refid="class_ace_1ab94f6a0b50f95846b20a921c1c48cbbd" prot="public" virt="non-virtual"><scope>Ace</scope><name>SubString</name></member>
      <member refid="class_ace_1a7d4131741f469b7220631088526e12ee" prot="public" virt="non-virtual"><scope>Ace</scope><name>SubString</name></member>
      <member refid="class_ace_1a8434cb3dc1700eb767a393087cf35ade" prot="public" virt="non-virtual"><scope>Ace</scope><name>Tan</name></member>
      <member refid="class_ace_1a8733891f27eea8b6725acd6ef81c123e" prot="public" virt="non-virtual"><scope>Ace</scope><name>Tan</name></member>
      <member refid="class_ace_1abeaf6de454adb6cbec71470d9c290631" prot="public" virt="non-virtual"><scope>Ace</scope><name>TanH</name></member>
      <member refid="class_ace_1ac035088ac628b78d0af94c801211dae8" prot="public" virt="non-virtual"><scope>Ace</scope><name>TanH</name></member>
      <member refid="class_ace_1a8e948c04ce26696ede60e70c5f70c361" prot="public" virt="non-virtual"><scope>Ace</scope><name>Tokenize</name></member>
      <member refid="class_ace_1a31130831d9560838ac2a2cb54cd6f876" prot="public" virt="non-virtual"><scope>Ace</scope><name>Tokenize</name></member>
      <member refid="class_ace_1aa10aa03639439fc61b99fa44d5f611ea" prot="public" virt="non-virtual"><scope>Ace</scope><name>Truncate</name></member>
      <member refid="class_ace_1ae512b20c30e74f66fef6c9d7fb14e331" prot="public" virt="non-virtual"><scope>Ace</scope><name>Truncate</name></member>
      <member refid="class_ace_1a9c69db829c926e09d728f6f793414fc2" prot="public" virt="non-virtual"><scope>Ace</scope><name>TwoToTheXPower</name></member>
      <member refid="class_ace_1a0cb2b7227bece54575fd0cb20d5f8234" prot="public" virt="non-virtual"><scope>Ace</scope><name>TwoToTheXPower</name></member>
      <member refid="class_ace_1a5796438df275d4868eda8e1d72991350" prot="public" virt="non-virtual"><scope>Ace</scope><name>WriteBinaryFile</name></member>
      <member refid="class_ace_1a3dd67050348d7bd1838b2a85e53a93f3" prot="public" virt="non-virtual"><scope>Ace</scope><name>WriteBinaryFileW</name></member>
      <member refid="class_ace_1af96ec8733f6e776aa2296afd79dfe38c" prot="public" virt="non-virtual"><scope>Ace</scope><name>WriteTextFile</name></member>
      <member refid="class_ace_1a7a200d3c2e606619c3044ea50904f632" prot="public" virt="non-virtual"><scope>Ace</scope><name>WriteTextFileW</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
